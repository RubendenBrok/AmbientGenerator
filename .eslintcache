[{"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/index.tsx":"1","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/reportWebVitals.ts":"2","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/App.tsx":"3","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/drift.ts":"4","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundplayer.ts":"5","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundsources.ts":"6","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/visuals.ts":"7"},{"size":502,"mtime":1612961605000,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1611927196000,"results":"10","hashOfConfig":"9"},{"size":19875,"mtime":1613583479000,"results":"11","hashOfConfig":"9"},{"size":1025,"mtime":1613054079000,"results":"12","hashOfConfig":"9"},{"size":10257,"mtime":1613057971000,"results":"13","hashOfConfig":"9"},{"size":20628,"mtime":1613592719000,"results":"14","hashOfConfig":"9"},{"size":2294,"mtime":1613222711000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"asqc5z",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/index.tsx",[],["36","37"],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/reportWebVitals.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/App.tsx",["38","39","40"],"import React from \"react\";\nimport { updateDrift } from \"./drift\";\nimport {\n  initSoundPlayer,\n  setTrackVolume,\n  setTrackDisable,\n  updateTrackActivity,\n  updateCurrentSequenceChords,\n  updatePattern,\n  playSequencers,\n  playFX,\n  stopAllSounds,\n  mutateSequence\n} from \"./soundplayer\";\nimport { soundSources } from \"./soundsources\";\nimport \"./App.css\";\nimport { updateGraphics, initGraphics } from \"./visuals\";\n\n// keys for dymaically creating and accessing state properties\nexport const keys = { \nvolKey : \"volume\",\nactKey : \"activity\",\nvolDriftKey : \"volDriftVelocity\",\nactDriftKey : \"actDriftVelocity\",\ndriftingKey : \"drifting\",\ndisabledKey : \"disabled\",\npatKey : \"pattern\"\n}\nexport const seqLength = 32;\nconst chordOptions = [\"G\",\"A\",\"B\",\"C\",\"D\",\"E\"],\nbarOptions = [1,2,4,8],\ntempoChangeOptions = [8,16],\ndrumChangeOptions= [4,8,12],\nFXLength = 6000,\nmaxBpm = 140,\nminBpm = 60,\nbpmVariance = 8;\n\n\n// initialize state from soundsources object, create properties for every track\nconst initState: any = {};\ninitializeState();\n\n/*\nwindow.onload = () => {\n  masterSeq.playing = true;\n  masterSeq.restart();\n}\n*/\n\nexport class App extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = { ...initState };\n\n    this.appLoop = this.appLoop.bind(this);\n    this.updateMasterSeq = this.updateMasterSeq.bind(this);\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n    this.handleActivityChange = this.handleActivityChange.bind(this);\n    this.handleDriftToggle = this.handleDriftToggle.bind(this);\n    this.handleDisableToggle = this.handleDisableToggle.bind(this);\n    this.handlePatternChange = this.handlePatternChange.bind(this);\n    this.handleBpmChange = this.handleBpmChange.bind(this);\n    this.handleChordClick = this.handleChordClick.bind(this);\n    this.handlePlayingToggle = this.handlePlayingToggle.bind(this);\n    this.handleInstUIToggle = this.handleInstUIToggle.bind(this);\n    this.handleDrumUIToggle = this.handleDrumUIToggle.bind(this);\n    this.handleFxUIToggle = this.handleFxUIToggle.bind(this);\n  }\n\n  handleVolumeChange(value: any, index: number) {\n    let newVolumeState: any = {};\n    newVolumeState[keys.volKey + index] = parseFloat(value);\n    this.setState({ ...newVolumeState }, () =>\n      setTrackVolume(this.state[keys.volKey + index], index)\n    );\n  }\n\n  handleActivityChange(value: any, index: number) {\n    let newActivityState: any = {};\n    newActivityState[keys.actKey + index] = parseFloat(value);\n    this.setState({ ...newActivityState }, () =>\n      updateTrackActivity(\n        this.state[keys.actKey + index],\n        index,\n        this.state.currentChord\n      )\n    );\n  }\n\n  handleDriftToggle(value: boolean, index: number) {\n    let newDriftState: any = {};\n    newDriftState[keys.driftingKey + index] = value;\n    this.setState({ ...newDriftState });\n  }\n\n  handleDisableToggle(value: boolean, index: number) {\n    let newDisabledState: any = {};\n    newDisabledState[keys.disabledKey + index] = !value;\n    this.setState({ ...newDisabledState }, () => {\n      setTrackDisable(this.state[keys.disabledKey + index], index);\n    });\n  }\n\n  handleChordClick(chord: string) {\n    if (chord !== this.state.currentChord) {\n      this.setState({ currentChord: chord }, () =>\n        updateCurrentSequenceChords(this.state.currentChord)\n      );\n    }\n  }\n\n  handleBpmChange(newBpm: number) {\n    this.setState({ bpm: newBpm });\n  }\n\n  handlePlayingToggle() {\n    this.setState({ playing: !this.state.playing }, () => {\n      if (!this.state.playing) {\n        soundSources.forEach((track: any, index: number) => {\n          stopAllSounds(index);\n        });\n      }\n    });\n  }\n\n  handlePatternChange(value: number, index: number) {\n    let newPatternState: any = {};\n    newPatternState[keys.patKey + index] = value;\n    this.setState({ ...newPatternState }, () => {\n      updatePattern(this.state[keys.patKey + index], index);\n    });\n  }\n\n  handleInstUIToggle() {\n    let newUIState: any = {};\n    newUIState.showInstUI = !this.state.showInstUI;\n    this.setState({ ...newUIState });\n  }\n  handleDrumUIToggle() {\n    let newUIState: any = {};\n    newUIState.showDrumUI = !this.state.showDrumUI;\n    this.setState({ ...newUIState });\n  }\n  handleFxUIToggle() {\n    let newUIState: any = {};\n    newUIState.showFxUI = !this.state.showFxUI;\n    this.setState({ ...newUIState });\n  }\n\n  updateMasterSeq() {\n    let sixteenth = (60 / this.state.bpm / 4) * 1000;\n    setTimeout(this.updateMasterSeq, sixteenth);\n\n    if (this.state.playing) {\n      //check if track properties should 'drift'\n      soundSources.forEach((track: any, index: number) => {\n        let newVolDriftVelocity: any = {};\n        let newActDriftVelocity: any = {};\n        if (this.state[keys.driftingKey + index]) {\n          let newVolumeObj = updateDrift(\n            this.state[keys.volKey + index],\n            this.state[keys.volDriftKey + index],\n            100,\n            0\n          );\n          newVolDriftVelocity[keys.volDriftKey + index] = newVolumeObj.velocity;\n          this.setState({ ...newVolDriftVelocity });\n          this.handleVolumeChange(newVolumeObj.value, index);\n\n          if (track.kind === \"inst\") {\n            let newActivityObj = updateDrift(\n              this.state[keys.actKey + index],\n              this.state[keys.actDriftKey + index],\n              100,\n              0\n            );\n            newActDriftVelocity[keys.actDriftKey + index] =\n              newActivityObj.velocity;\n            this.setState({ ...newActDriftVelocity });\n            this.handleActivityChange(newActivityObj.value, index);\n          }\n        }\n      });\n\n      let newSeqState = { ...this.state.masterSeq };\n\n      playSequencers(newSeqState.currentSequencePos);\n      newSeqState.currentSequencePos++;\n      if (newSeqState.currentSequencePos >= seqLength) {\n        newSeqState.currentSequencePos = 0;\n        newSeqState.barsPlayed++;\n\n        if (newSeqState.barsPlayed === newSeqState.tempoChangeTimer) {\n          newSeqState.tempoChangeTimer =\n            newSeqState.barsPlayed + randomArrEntry(tempoChangeOptions);\n          let newBpm = this.state.bpm;\n          newBpm -= bpmVariance;\n          newBpm += Math.round(bpmVariance * 2 * Math.random());\n          if (newBpm > maxBpm) {\n            newBpm = maxBpm;\n          }\n          if (newBpm < minBpm) {\n            newBpm = minBpm;\n          }\n          this.handleBpmChange(newBpm);\n        }\n\n        soundSources.forEach((track: any, index: number) => {\n          if (track.kind === \"inst\" || track.kind === \"drum\") {\n            if (Math.random() < track.mutationChance) {\n              mutateSequence(this.state.currentChord, index);\n            }\n          }\n        });\n\n        if (newSeqState.newDrumSeqTimer === newSeqState.barsPlayed) {\n          newSeqState.newDrumSeqTimer =\n            newSeqState.newDrumSeqTimer + randomArrEntry(drumChangeOptions);\n          soundSources.forEach((track: any, index: number) => {\n            if (track.kind === \"drum\") {\n              this.handlePatternChange(\n                Math.floor(Math.random() * track.patterns.length) + 1,\n                index\n              );\n            }\n          });\n        }\n\n        if (newSeqState.barsPlayed === newSeqState.nextChord) {\n          newSeqState.nextChord =\n            newSeqState.barsPlayed + randomArrEntry(barOptions);\n          let newChord = newRandomChord(this.state.currentChord);\n          this.setState({ currentChord: newChord }, () => {\n            updateCurrentSequenceChords(this.state.currentChord);\n          });\n        }\n      }\n\n      if (performance.now() - newSeqState.FXTimer > FXLength) {\n        playFX();\n        newSeqState.FXTimer = performance.now();\n      }\n\n      this.setState({ masterSeq: newSeqState });\n    }\n  }\n\n  // main loop\n  appLoop() {\n\n    updateGraphics();\n\n    window.requestAnimationFrame(this.appLoop);\n  }\n\n  componentDidMount() {\n    initSoundPlayer(this.state);\n    initGraphics();\n    let sixteenth = (60 / this.state.bpm / 4) * 1000;\n    setTimeout(this.updateMasterSeq, sixteenth);\n\n    this.appLoop();\n  }\n\n  render() {\n    return (\n      <div className=\"UIContainer\">\n        <div className=\"UILeft\">\n          <InstrumentContainer\n            UIIndex={0}\n            tracks={this.state}\n            handleVolumeChange={this.handleVolumeChange}\n            handleActivityChange={this.handleActivityChange}\n            handleDriftToggle={this.handleDriftToggle}\n            handleDisableToggle={this.handleDisableToggle}\n            handleUIToggle={this.handleInstUIToggle}\n            showUI={this.state.showInstUI}\n          />\n          <ChordContainer\n            currentChord={this.state.currentChord}\n            handleChordClick={this.handleChordClick}\n            showUI={this.state.showInstUI}\n          />\n        </div>\n        <div className=\"UIRight\">\n          <RhythmContainer\n            UIIndex={1}\n            tracks={this.state}\n            bpm={this.state.bpm}\n            handleVolumeChange={this.handleVolumeChange}\n            handleBpmChange={this.handleBpmChange}\n            handleDriftToggle={this.handleDriftToggle}\n            handlePatternChange={this.handlePatternChange}\n            handleDisableToggle={this.handleDisableToggle}\n            handlePlayingToggle={this.handlePlayingToggle}\n            handleUIToggle={this.handleDrumUIToggle}\n            playing={this.state.playing}\n            showUI={this.state.showDrumUI}\n          />\n          <FXContainer\n            UIIndex={2}\n            tracks={this.state}\n            handleVolumeChange={this.handleVolumeChange}\n            handleDriftToggle={this.handleDriftToggle}\n            handleDisableToggle={this.handleDisableToggle}\n            handleUIToggle={this.handleFxUIToggle}\n            showUI={this.state.showFxUI}\n          />\n        </div>\n      </div>\n    );\n  }\n} \n\nconst InstrumentContainer = React.memo(function InstrumentContainer(props: any) {\n  return (\n    <div>\n      <h1 onClick = {()=>{props.handleUIToggle()}}>Instruments </h1>\n      {props.showUI\n      ? \n      <div className=\"InstrumentContainer\">\n        {soundSources.map((track: any, index: number) => {\n          if (track.kind === \"inst\")\n            return (\n              <TrackUI\n                index={index}\n                volume={props.tracks[keys.volKey + index]}\n                range2Value={props.tracks[keys.actKey + index]}\n                disabled={props.tracks[keys.disabledKey + index]}\n                drifting={props.tracks[keys.driftingKey + index]}\n                range2Label={\"Activity: \"}\n                range2Min={0}\n                range2Max={100}\n                range2Step={1}\n                key={index}\n                handleVolumeChange={props.handleVolumeChange}\n                handleRange2Change={props.handleActivityChange}\n                handleDriftToggle={props.handleDriftToggle}\n                handleDisableToggle={props.handleDisableToggle}\n              />\n            );\n        })}\n      </div>\n      :\"\"}\n    </div>\n  );\n})\n\nconst TrackUI = React.memo(function TrackUI(props : any) {\n    return (\n      <div className=\"TrackUI\">\n        <p><b>{soundSources[props.index].name}</b></p>\n        <p>Volume: {Math.round(props.volume)}</p>\n        <p>\n          <ControlledSlider\n            value={props.volume}\n            onChange={props.handleVolumeChange}\n            disabled={props.disabled}\n            index={props.index}\n            min={0}\n            max={100}\n            step={1}\n          />\n        </p>\n        <p>{props.range2Label}{Math.round(props.range2Value)}</p>\n        <p>\n          <ControlledSlider\n            value={props.range2Value}\n            onChange={props.handleRange2Change}\n            disabled={props.disabled}\n            index={props.index}\n            min={props.range2Min}\n            max={props.range2Max}\n            step={props.range2Step}\n          />\n        </p>\n        <p>\n          Drift:{\" \"}\n          <ControlledCheckbox\n            index={props.index}\n            checked={props.drifting}\n            onChange={props.handleDriftToggle}\n            disabled={props.disabled}\n          />\n        </p>\n        <p>\n          Enabled:{\" \"}\n          <ControlledCheckbox\n            index={props.index}\n            checked={!props.disabled}\n            onChange={props.handleDisableToggle}\n            disabled={false}\n          />\n        </p>\n      </div>\n    );\n  }\n)\n\nconst RhythmContainer = React.memo(function RhythmContainer(props: any) {\n  return (\n    <div className=\"drumdiv\">\n      <h1 onClick = {()=>{props.handleUIToggle()}}>Drums</h1>\n      {props.showUI\n      ?\n      <div className=\"RhythmContainer\">\n        {soundSources.map((track: any, index: number) => {\n          if (track.kind === \"drum\") {\n            return (\n              <TrackUI\n                index={index}\n                volume={props.tracks[keys.volKey + index]}\n                disabled={props.tracks[keys.disabledKey + index]}\n                drifting={props.tracks[keys.driftingKey + index]}\n                range2Value={props.tracks[keys.patKey + index]}\n                range2Label={\"Pattern: \"}\n                range2Min={1}\n                range2Max={soundSources[index].patterns.length}\n                range2Step={1}\n                key={index}\n                handleVolumeChange={props.handleVolumeChange}\n                handleRange2Change={props.handlePatternChange}\n                handleDriftToggle={props.handleDriftToggle}\n                handleDisableToggle={props.handleDisableToggle}\n              />\n            );\n          }\n        })}\n        <div className=\"bpmslider\">\n          <p>BPM: {props.bpm}</p>\n          <ControlledSlider\n            index={0}\n            value={props.bpm}\n            onChange={props.handleBpmChange}\n            min={minBpm}\n            max={maxBpm}\n          />\n                  <button onClick={props.handlePlayingToggle}>\n          {props.playing\n          ? 'PAUSE'\n          : 'PLAY'}\n        </button>\n        </div>\n\n      </div>\n      :\"\"}\n    </div>\n  );\n});\n\nconst FXContainer = React.memo(function FXContainer(props: any) {\n  return (\n    <div className=\"fxdiv\">\n      <h1 onClick = {()=>{props.handleUIToggle()}}>FX</h1>\n      {props.showUI\n      ?\n      <div className=\"FXContainer\">\n        {soundSources.map((track: any, index: number) => {\n          if (track.kind === \"fx\") {\n            return (\n              <FXUI\n                index={index}\n                volume={props.tracks[keys.volKey + index]}\n                disabled={props.tracks[keys.disabledKey + index]}\n                drifting={props.tracks[keys.driftingKey + index]}\n                key={index}\n                handleVolumeChange={props.handleVolumeChange}\n                handleDriftToggle={props.handleDriftToggle}\n                handleDisableToggle={props.handleDisableToggle}\n              />\n            );\n          }\n        })}\n      </div>\n      :\"\"}\n    </div>\n  );\n})\n\nconst FXUI = React.memo(function FXUI(props: any){\n  return (\n    <div className=\"TrackUI\">\n      <p><b>{soundSources[props.index].name}</b></p>\n      <p>Volume: {Math.round(props.volume)}</p>\n      <p>\n        <ControlledSlider\n          value={props.volume}\n          onChange={props.handleVolumeChange}\n          disabled={props.disabled}\n          index={props.index}\n          min={0}\n          max={100}\n          step={1}\n        />\n      </p>\n      <p>\n        Drift:{\" \"}\n        <ControlledCheckbox\n          index={props.index}\n          checked={props.drifting}\n          onChange={props.handleDriftToggle}\n          disabled={props.disabled}\n        />\n      </p>\n      <p>\n        Enabled:{\" \"}\n        <ControlledCheckbox\n          index={props.index}\n          checked={!props.disabled}\n          onChange={props.handleDisableToggle}\n          disabled={false}\n        />\n      </p>\n    </div>\n  );\n})\n\nfunction ChordContainer(props: any) {\n  return (\n    <div>\n      {props.showUI ? (\n        <div className=\"ChordContainer\">\n          <ChordButton\n            value=\"G\"\n            name=\"G\"\n            handleChordClick={props.handleChordClick}\n          />\n          <ChordButton\n            value=\"A\"\n            name=\"Am\"\n            handleChordClick={props.handleChordClick}\n          />\n          <ChordButton\n            value=\"B\"\n            name=\"Bm\"\n            handleChordClick={props.handleChordClick}\n          />\n          <ChordButton\n            value=\"C\"\n            name=\"C\"\n            handleChordClick={props.handleChordClick}\n          />\n          <ChordButton\n            value=\"D\"\n            name=\"D\"\n            handleChordClick={props.handleChordClick}\n          />\n          <ChordButton\n            value=\"E\"\n            name=\"Em\"\n            handleChordClick={props.handleChordClick}\n          />\n          the current chord is {props.currentChord}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n\nfunction ChordButton(props : any){\n  return (\n    <div className = \"ChordButton\">\n      <button onClick = { () => props.handleChordClick(props.value) }>\n      {props.name}</button>\n    </div>\n  )\n}\n\nfunction ControlledSlider(props : any){\n  function handleChange(event : any){\n    props.onChange(event.target.value, props.index)\n  }\n  return (\n    <input\n    type=\"range\"\n    value={props.value}\n    onChange={handleChange}\n    disabled={props.disabled}\n    min={props.min}\n    max={props.max}\n    step={props.step}\n  ></input>\n  )\n}\n\nfunction ControlledCheckbox(props : any){\n  function handleChange(event : any){\n    props.onChange(event.target.checked, props.index)\n  }\n  return (\n    <input\n    type=\"checkbox\"\n    checked={props.checked}\n    onChange={handleChange}\n    disabled={props.disabled}\n  ></input>\n  )\n}\n\nfunction initializeState(){\n  soundSources.forEach((track : any, index: number) => {\n\n    switch (track.kind){\n      case \"inst\":\n        initState[keys.volKey + index] = soundSources[index].initVolume;\n        initState[keys.actKey + index] = soundSources[index].initActivity;\n        initState[keys.volDriftKey + index] = 0;\n        initState[keys.actDriftKey + index] = 0;\n        initState[keys.driftingKey + index] = soundSources[index].initDrifting;\n        initState[keys.disabledKey + index] = soundSources[index].initDisabled;\n        break;\n  \n      case \"drum\":\n        initState[keys.volKey + index] = soundSources[index].initVolume;\n        initState[keys.volDriftKey + index] = 0;\n        initState[keys.driftingKey + index] = soundSources[index].initDrifting;\n        initState[keys.disabledKey + index] = soundSources[index].initDisabled;\n        initState[keys.patKey + index] = soundSources[index].initPattern + 1;\n        break;\n\n      case \"fx\":\n        initState[keys.volKey + index] = soundSources[index].initVolume;\n        initState[keys.volDriftKey + index] = 0;\n        initState[keys.driftingKey + index] = soundSources[index].initDrifting;\n        initState[keys.disabledKey + index] = soundSources[index].initDisabled;\n        break;\n    }\n    initState.currentChord = \"G\";\n    initState.bpm = 90;\n    initState.playing = true;\n\n    initState.showInstUI = true;\n    initState.showDrumUI = true;\n    initState.showFxUI = true;\n\n    initState.masterSeq = {\n      currentSequencePos : 0,\n      barsPlayed : 0,\n      newDrumSeqTimer : randomArrEntry(drumChangeOptions),\n      FXTimer: -FXLength,\n      nextChord: randomArrEntry(barOptions),\n      tempoChangeTimer: randomArrEntry(tempoChangeOptions)\n    }\n  })\n}\n\nfunction newRandomChord(currentChord : string) {\n  let possibleOptions = [...chordOptions];\n  let currentChordIndex = possibleOptions.indexOf(currentChord);\n  possibleOptions.splice(currentChordIndex,1)\n  return randomArrEntry(possibleOptions);\n}\n\nexport function randomArrEntry(arr : any){\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport default App;\n\n","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/drift.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundplayer.ts",["41","42"],"import { Howl, Howler } from \"howler\"\nimport { soundSources } from \"./soundsources\"\nimport { keys, seqLength, randomArrEntry } from \"./App\"\nimport { SSL_OP_NO_QUERY_MTU } from \"constants\";\n\nclass Sequencer {\n  disabled: boolean;\n  sounds: any[];\n  currentSequence: number[];\n  currentSoundIndex: number;\n  activity: number;\n  noteAmt: number;\n  patterns: any;\n  tonal : boolean;\n  maxSoundsInSequence: number;\n  minSoundsInSequence: number;\n  initPattern: number;\n\n  constructor(\n    sounds: any[],\n    activity: number,\n    disabled: boolean,\n    patterns: any,\n    tonal: boolean,\n    maxSoundsInSequence: number,\n    minSoundsInSequence: number,\n    currentChord: string,\n    initPattern: number\n  ) {\n    this.sounds = sounds;\n    this.disabled = disabled;\n    this.currentSequence = [];\n    this.activity = activity;\n    this.noteAmt = 0;\n    this.patterns = patterns;\n    this.tonal = tonal;\n    this.currentSoundIndex = 0;\n    this.maxSoundsInSequence = maxSoundsInSequence;\n    this.minSoundsInSequence = minSoundsInSequence;\n    this.initPattern = initPattern\n\n    this.build(currentChord, initPattern);\n  }\n\n  calcAmountOfNotes() {\n    this.noteAmt =\n      this.minSoundsInSequence +\n      Math.floor((this.activity / 100) * this.maxSoundsInSequence);\n  }\n\n  build(currentChord : string, initPattern : number) {\n    if (this.patterns) {\n      this.buildFromPattern(initPattern)\n    } else {\n      this.buildFromActivity(currentChord)\n    }\n  }\n\n  buildFromActivity(currentChord : string){\n    this.calcAmountOfNotes();\n    this.currentSequence = [];\n    let possibleIndexes = [];\n    for (let i = 0; i < seqLength; i++) {\n      this.currentSequence.push(NaN);\n      possibleIndexes.push(i);\n    }\n    for (let i = 0; i < this.noteAmt; i++) {\n      let newSeqIndex =\n        possibleIndexes[Math.floor(Math.random() * seqLength)];\n      let newSoundIndex = getNextSoundIndex(this.sounds, currentChord);\n      this.currentSequence[newSeqIndex] = newSoundIndex;\n      possibleIndexes.splice(newSeqIndex, 1);\n    }\n  }\n\n  buildFromPattern(patternIndex : number){\n    let newSeq = [...this.patterns[patternIndex]];\n    newSeq.forEach((step : number, index : number)=>{\n      if (!isNaN(step)){\n        newSeq[index] = Math.floor(Math.random() * this.sounds.length)\n      }\n    })\n    this.currentSequence = newSeq;\n  }\n\n  playSeqPosition(position : number){\n      if (!isNaN(this.currentSequence[position])) {\n        //this.sounds[this.currentSoundIndex].howl.stop();\n        if (!this.disabled) {\n          this.sounds[this.currentSequence[position]].howl.play();\n          this.currentSoundIndex = this.currentSequence[position];\n        }\n      }  \n  }\n\n  updateChords(currentChord : string) {\n    if (this.tonal) {\n      this.currentSequence.forEach((seqItem: number, seqIndex: number) => {\n        if (!isNaN(seqItem)) {\n          if (!this.sounds[seqItem].chords.includes(currentChord)) {\n            this.currentSequence[seqIndex] = getNextSoundIndex(\n              this.sounds,\n              currentChord\n            );\n          }\n        }\n      });\n    }\n  }\n\n  updateActivity(currentChord : string){\n    this.calcAmountOfNotes();\n    let currentSequenceNoteIndices : number[] = [];\n    let currentSequenceEmptyIndices : number[] = [];\n    let editIndex : number;\n    let noteDifference : number;\n\n    this.currentSequence.forEach((seqItem : number, index: number) => {\n        if (!isNaN(seqItem)){\n            currentSequenceNoteIndices.push(index)\n        }   else {\n            currentSequenceEmptyIndices.push(index)\n        }\n    })\n\n    noteDifference = this.noteAmt - currentSequenceNoteIndices.length\n    if (noteDifference < 0){\n        for (let i = 0; i > noteDifference; i--){\n            editIndex = Math.floor(Math.random() * currentSequenceNoteIndices.length);\n            this.currentSequence[currentSequenceNoteIndices[editIndex]] = NaN;\n            currentSequenceNoteIndices.splice(editIndex, 1)\n        }\n    } else if (noteDifference > 0){\n        for (let i = 0; i < noteDifference; i++){\n            editIndex = Math.floor(Math.random() * currentSequenceEmptyIndices.length);\n            this.currentSequence[currentSequenceEmptyIndices[editIndex]] = getNextSoundIndex(this.sounds, currentChord);\n            currentSequenceEmptyIndices.splice(editIndex, 1)\n        }\n    }\n  }\n}\n\nclass Sound {\n  howl: any;\n  chords: any;\n\n  constructor(url: string, baseVolume: number, initVolume: number, chords: string[]) {\n    this.howl = new Howl({\n      src: [url],\n      volume: baseVolume * (initVolume / 100)\n    })\n    this.chords = chords;\n  }\n}\n\n/*  for each track, initsoundPlayer loads every sample into a new howl, \n    together with the chords that particular sound can be played on it.\n    All these sounds are then pushed into a sequencer object, which controls the playback\n    \n    soundSources [\n        sequencer :\n            sounds: [{\n                howl: *ACTUAL SOUND*\n                chords [\"Array of chords it can be played on\"]\n            ]}\n    ]  \n*/\n\nexport function initSoundPlayer(state: any) {\n  Howler.volume(2);\n\n  soundSources.forEach((track: any, index: number) => {\n    let soundsArr: any[] = [];\n    switch (track.kind) {\n      case \"inst\":\n        track.sampleLoader.forEach((sample: any) => {\n          soundsArr.push(\n            new Sound(sample.sampleSource, track.baseVolume, track.initVolume, sample.chords)\n          );\n        });\n        track.sequencer = new Sequencer(\n          soundsArr,\n          state[keys.actKey + index],\n          state[keys.disabledKey + index],\n          false,\n          true,\n          track.maxSoundsInSequence,\n          track.minSoundsInSequence,\n          state.currentChord,\n          track.initPattern\n        );\n        break;\n\n      case \"drum\":\n        track.sampleLoader.forEach((sample: any) => {\n          soundsArr.push(\n            new Sound(sample.sampleSource, track.baseVolume, track.initVolume, sample.chords)\n          );\n        });\n        track.sequencer = new Sequencer(\n          soundsArr,\n          100,\n          state[keys.disabledKey + index].disabled,\n          track.patterns,\n          false,\n          track.maxSoundsInSequence,\n          track.minSoundsInSequence,\n          state.currentChord,\n          track.initPattern\n        );\n        break;\n\n        case \"fx\":\n          track.sampleLoader.forEach((sample: any) => {\n            soundsArr.push(\n              new Sound(sample.sampleSource, track.baseVolume, track.initVolume, sample.chords)\n            );\n          });\n          track.sequencer = new Sequencer(\n            soundsArr,\n            100,\n            state[keys.disabledKey + index].disabled,\n            false,\n            false,\n            track.maxSoundsInSequence,\n            track.minSoundsInSequence,\n            state.currentChord,\n            track.initPattern\n          );\n          break;     \n    }    \n  });\n}\n\n\nexport function setTrackVolume(volume: number, index: number) {\n  soundSources[index].sequencer.sounds.forEach((sound: any) => {\n    sound.howl.volume(\n      (volume / 100) * soundSources[index].baseVolume\n    );\n  });\n}\n\nexport function updateTrackActivity(activity: number, index: number, currentChord: string) {\n  soundSources[index].sequencer.activity = activity;\n  soundSources[index].sequencer.updateActivity(currentChord);\n}\n\nexport function setTrackDisable(disabled : boolean, index: number) {\n  soundSources[index].sequencer.disabled = disabled;\n  if (disabled) {\n    stopAllSounds(index);\n  }\n  if (!disabled && soundSources[index].kind === \"fx\"){\n    soundSources[index].sequencer.sounds[0].howl.play()\n  }\n}\n\nexport function stopAllSounds(index: number) {\n  soundSources[index].sequencer.sounds.forEach((sound: any) => {\n    sound.howl.stop();\n  });\n}\n\nfunction getRandomIntButNotThisOne(range: number, current: number) {\n  let out = Math.floor(Math.random() * range);\n  if (out === current) {\n    out = getRandomIntButNotThisOne(range, out);\n  }\n  return out;\n}\n\nfunction getNextSoundIndex(sounds: object[], currentChord: string) {\n  let newSoundIndex: number;\n  let newSoundOptions: number[] = [];\n  sounds.forEach((sound: any, index: number) => {\n    if (sound.chords.includes(currentChord)) {\n      newSoundOptions.push(index);\n    }\n  });\n  newSoundIndex = randomArrEntry(newSoundOptions);\n\n  return newSoundIndex;\n}\n\nexport function updateCurrentSequenceChords(currentChord: string) {\n  soundSources.forEach((track: any, index: any) => {\n    if (track.kind === \"inst\"){\n      track.sequencer.updateChords(currentChord);\n    }\n  });\n}\n\nexport function playSequencers(position: number){\n  soundSources.forEach((track: any, index: any) => {\n    if (track.kind === \"inst\" || track.kind === \"drum\"){\n      track.sequencer.playSeqPosition(position);\n    }\n  });\n}\n\nexport function playFX(){\n  soundSources.forEach((track: any, index: any) => {\n    if (track.kind === \"fx\"){\n      if (!track.sequencer.disabled){\n      track.sequencer.sounds[0].howl.play();\n      }\n    }\n  });\n}\n\nexport function updatePattern(value: number, index: number){\n  soundSources[index].sequencer.buildFromPattern(value - 1);\n}\n\nexport function mutateSequence(currentChord: string, index: number) {\n  soundSources[index].sequencer.currentSequence = randomMutation(\n    1,\n    soundSources[index].sequencer.currentSequence,\n    soundSources[index].sequencer.sounds,\n    soundSources[index].sequencer.tonal,\n    currentChord\n  );\n}\n\n\nfunction randomMutation(\n  iterations: number,\n  startingSeq: number[],\n  sounds: any,\n  tonal: boolean,\n  currentChord: string\n) {\n  let newSeq = [...startingSeq];\n  for (let i = 0; i < iterations; i++) {\n    let emptyIndexes: number[] = [];\n    let filledIndexes: number[] = [];\n    newSeq.forEach((step: number, index: number) => {\n      isNaN(step) ? emptyIndexes.push(index) : filledIndexes.push(index);\n    });\n    if (tonal){\n      newSeq[\n        emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)]\n      ] = getNextSoundIndex(sounds, currentChord)\n    } else {\n      newSeq[\n        emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)]\n      ] = Math.floor(Math.random() * sounds.length);\n    }\n\n    newSeq[\n      filledIndexes[Math.floor(Math.random() * filledIndexes.length)]\n    ] = NaN;\n  }\n  return newSeq;\n}\n\n\n\n\n","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundsources.ts",["43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"/*\nimport piano1 from \"./sound/1 piano/1.mp3\"\nimport piano2 from \"./sound/1 piano/2.mp3\"\nimport piano3 from \"./sound/1 piano/3.mp3\"\nimport piano4 from \"./sound/1 piano/4.mp3\"\nimport piano5 from \"./sound/1 piano/5.mp3\"\nimport piano6 from \"./sound/1 piano/6.mp3\"\nimport piano7 from \"./sound/1 piano/7.mp3\"\nimport piano8 from \"./sound/1 piano/8.mp3\"\nimport piano9 from \"./sound/1 piano/9.mp3\"\nimport piano10 from \"./sound/1 piano/10.mp3\"\nimport piano11 from \"./sound/1 piano/11.mp3\"\nimport piano12 from \"./sound/1 piano/12.mp3\"\nimport piano13 from \"./sound/1 piano/13.mp3\"\nimport piano14 from \"./sound/1 piano/14.mp3\"\nimport piano15 from \"./sound/1 piano/15.mp3\"\nimport piano16 from \"./sound/1 piano/16.mp3\"\nimport piano17 from \"./sound/1 piano/17.mp3\"\nimport piano18 from \"./sound/1 piano/18.mp3\"\nimport piano19 from \"./sound/1 piano/19.mp3\"\nimport piano20 from \"./sound/1 piano/20.mp3\"\n*/\n\nimport piano1 from \"./sound/11 piano2/1.mp3\"\nimport piano2 from \"./sound/11 piano2/2.mp3\"\nimport piano3 from \"./sound/11 piano2/3.mp3\"\nimport piano4 from \"./sound/11 piano2/4.mp3\"\nimport piano5 from \"./sound/11 piano2/5.mp3\"\nimport piano6 from \"./sound/11 piano2/6.mp3\"\nimport piano7 from \"./sound/11 piano2/7.mp3\"\nimport piano8 from \"./sound/11 piano2/8.mp3\"\nimport piano9 from \"./sound/11 piano2/9.mp3\"\nimport piano10 from \"./sound/1 piano/10.mp3\"\nimport piano11 from \"./sound/11 piano2/11.mp3\"\nimport piano12 from \"./sound/11 piano2/12.mp3\"\nimport piano13 from \"./sound/11 piano2/13.mp3\"\nimport piano14 from \"./sound/11 piano2/14.mp3\"\nimport piano15 from \"./sound/11 piano2/15.mp3\"\nimport piano16 from \"./sound/11 piano2/16.mp3\"\nimport piano17 from \"./sound/11 piano2/17.mp3\"\nimport piano18 from \"./sound/11 piano2/18.mp3\"\nimport piano19 from \"./sound/11 piano2/19.mp3\"\nimport piano20 from \"./sound/11 piano2/20.mp3\"\nimport piano21 from \"./sound/11 piano2/21.mp3\"\nimport piano22 from \"./sound/11 piano2/22.mp3\"\nimport piano23 from \"./sound/11 piano2/23.mp3\"\nimport piano24 from \"./sound/11 piano2/24.mp3\"\n\nimport synthbas1 from \"./sound/2 synthbas/1.mp3\"\nimport synthbas2 from \"./sound/2 synthbas/2.mp3\"\nimport synthbas3 from \"./sound/2 synthbas/3.mp3\"\nimport synthbas4 from \"./sound/2 synthbas/4.mp3\"\nimport synthbas5 from \"./sound/2 synthbas/5.mp3\"\nimport synthbas6 from \"./sound/2 synthbas/6.mp3\"\nimport synthbas7 from \"./sound/2 synthbas/7.mp3\"\nimport synthbas8 from \"./sound/2 synthbas/8.mp3\"\nimport synthbas9 from \"./sound/2 synthbas/9.mp3\"\nimport synthbas10 from \"./sound/2 synthbas/10.mp3\"\nimport synthbas11 from \"./sound/2 synthbas/11.mp3\"\nimport synthbas12 from \"./sound/2 synthbas/12.mp3\"\nimport synthbas13 from \"./sound/2 synthbas/13.mp3\"\nimport synthbas14 from \"./sound/2 synthbas/14.mp3\"\n\nimport moogbas1 from \"./sound/9 moogbas/1.mp3\"\nimport moogbas2 from \"./sound/9 moogbas/2.mp3\"\nimport moogbas3 from \"./sound/9 moogbas/3.mp3\"\nimport moogbas4 from \"./sound/9 moogbas/4.mp3\"\nimport moogbas5 from \"./sound/9 moogbas/5.mp3\"\nimport moogbas6 from \"./sound/9 moogbas/6.mp3\"\nimport moogbas7 from \"./sound/9 moogbas/7.mp3\"\nimport moogbas8 from \"./sound/9 moogbas/8.mp3\"\nimport moogbas9 from \"./sound/9 moogbas/9.mp3\"\nimport moogbas10 from \"./sound/9 moogbas/10.mp3\"\nimport moogbas11 from \"./sound/9 moogbas/11.mp3\"\nimport moogbas12 from \"./sound/9 moogbas/12.mp3\"\n\n\nimport synthpad1 from \"./sound/3 synthpad/1.mp3\"\nimport synthpad2 from \"./sound/3 synthpad/2.mp3\"\nimport synthpad3 from \"./sound/3 synthpad/3.mp3\"\nimport synthpad4 from \"./sound/3 synthpad/4.mp3\"\nimport synthpad5 from \"./sound/3 synthpad/5.mp3\"\nimport synthpad6 from \"./sound/3 synthpad/6.mp3\"\nimport synthpad7 from \"./sound/3 synthpad/7.mp3\"\nimport synthpad8 from \"./sound/3 synthpad/8.mp3\"\nimport synthpad9 from \"./sound/3 synthpad/9.mp3\"\nimport synthpad10 from \"./sound/3 synthpad/10.mp3\"\nimport synthpad11 from \"./sound/3 synthpad/11.mp3\"\nimport synthpad12 from \"./sound/3 synthpad/12.mp3\"\nimport synthpad13 from \"./sound/3 synthpad/13.mp3\"\nimport synthpad14 from \"./sound/3 synthpad/14.mp3\"\n\nimport kalimba1 from \"./sound/4 kalimba/1.mp3\"\nimport kalimba2 from \"./sound/4 kalimba/2.mp3\"\nimport kalimba3 from \"./sound/4 kalimba/3.mp3\"\nimport kalimba4 from \"./sound/4 kalimba/4.mp3\"\nimport kalimba5 from \"./sound/4 kalimba/5.mp3\"\nimport kalimba6 from \"./sound/4 kalimba/6.mp3\"\nimport kalimba7 from \"./sound/4 kalimba/7.mp3\"\nimport kalimba8 from \"./sound/4 kalimba/8.mp3\"\nimport kalimba9 from \"./sound/4 kalimba/9.mp3\"\nimport kalimba10 from \"./sound/4 kalimba/10.mp3\"\nimport kalimba11 from \"./sound/4 kalimba/11.mp3\"\nimport kalimba12 from \"./sound/4 kalimba/12.mp3\"\nimport kalimba13 from \"./sound/4 kalimba/13.mp3\"\nimport kalimba14 from \"./sound/4 kalimba/14.mp3\"\nimport kalimba15 from \"./sound/4 kalimba/15.mp3\"\n\nimport strings1 from \"./sound/5 strings/1.mp3\"\nimport strings2 from \"./sound/5 strings/2.mp3\"\nimport strings3 from \"./sound/5 strings/3.mp3\"\nimport strings4 from \"./sound/5 strings/4.mp3\"\nimport strings5 from \"./sound/5 strings/5.mp3\"\nimport strings6 from \"./sound/5 strings/6.mp3\"\nimport strings7 from \"./sound/5 strings/7.mp3\"\nimport strings8 from \"./sound/5 strings/8.mp3\"\nimport strings9 from \"./sound/5 strings/9.mp3\"\nimport strings10 from \"./sound/5 strings/10.mp3\"\nimport strings11 from \"./sound/5 strings/11.mp3\"\nimport strings12 from \"./sound/5 strings/12.mp3\"\nimport strings13 from \"./sound/5 strings/13.mp3\"\nimport strings14 from \"./sound/5 strings/14.mp3\"\nimport strings15 from \"./sound/5 strings/15.mp3\"\nimport strings16 from \"./sound/5 strings/16.mp3\"\nimport strings17 from \"./sound/5 strings/17.mp3\"\n\nimport duomoog1 from \"./sound/7 duomoog/1.mp3\"\nimport duomoog2 from \"./sound/7 duomoog/2.mp3\"\nimport duomoog3 from \"./sound/7 duomoog/3.mp3\"\nimport duomoog4 from \"./sound/7 duomoog/4.mp3\"\nimport duomoog5 from \"./sound/7 duomoog/5.mp3\"\nimport duomoog6 from \"./sound/7 duomoog/6.mp3\"\nimport duomoog7 from \"./sound/7 duomoog/7.mp3\"\nimport duomoog8 from \"./sound/7 duomoog/8.mp3\"\nimport duomoog9 from \"./sound/7 duomoog/9.mp3\"\nimport duomoog10 from \"./sound/7 duomoog/10.mp3\"\nimport duomoog11 from \"./sound/7 duomoog/11.mp3\"\nimport duomoog12 from \"./sound/7 duomoog/12.mp3\"\nimport duomoog13 from \"./sound/7 duomoog/13.mp3\"\nimport duomoog14 from \"./sound/7 duomoog/14.mp3\"\nimport duomoog15 from \"./sound/7 duomoog/15.mp3\"\nimport duomoog16 from \"./sound/7 duomoog/16.mp3\"\nimport duomoog17 from \"./sound/7 duomoog/17.mp3\"\nimport duomoog18 from \"./sound/7 duomoog/18.mp3\"\nimport duomoog19 from \"./sound/7 duomoog/19.mp3\"\n\nimport pluckbas1 from \"./sound/6 pluckbas/1.mp3\"\nimport pluckbas2 from \"./sound/6 pluckbas/2.mp3\"\nimport pluckbas3 from \"./sound/6 pluckbas/3.mp3\"\nimport pluckbas4 from \"./sound/6 pluckbas/4.mp3\"\nimport pluckbas5 from \"./sound/6 pluckbas/5.mp3\"\nimport pluckbas6 from \"./sound/6 pluckbas/6.mp3\"\nimport pluckbas7 from \"./sound/6 pluckbas/7.mp3\"\nimport pluckbas8 from \"./sound/6 pluckbas/8.mp3\"\nimport pluckbas9 from \"./sound/6 pluckbas/9.mp3\"\nimport pluckbas10 from \"./sound/6 pluckbas/10.mp3\"\nimport pluckbas11 from \"./sound/6 pluckbas/11.mp3\"\nimport pluckbas12 from \"./sound/6 pluckbas/12.mp3\"\nimport pluckbas13 from \"./sound/6 pluckbas/13.mp3\"\nimport pluckbas14 from \"./sound/6 pluckbas/14.mp3\"\n\nimport submarine1 from \"./sound/10 moog submarine/1.mp3\"\nimport submarine2 from \"./sound/10 moog submarine/2.mp3\"\nimport submarine3 from \"./sound/10 moog submarine/3.mp3\"\nimport submarine4 from \"./sound/10 moog submarine/4.mp3\"\nimport submarine5 from \"./sound/10 moog submarine/5.mp3\"\nimport submarine6 from \"./sound/10 moog submarine/6.mp3\"\nimport submarine7 from \"./sound/10 moog submarine/7.mp3\"\nimport submarine8 from \"./sound/10 moog submarine/8.mp3\"\n\nimport kick from \"./sound/drums/kick.mp3\"\nimport snare1 from \"./sound/drums/snare1.mp3\"\nimport snare2 from \"./sound/drums/snare2.mp3\"\nimport snare3 from \"./sound/drums/snare3.mp3\"\n\nimport rain from \"./sound/fx/rain.mp3\"\nimport vinyl from \"./sound/fx/vinyl.mp3\"\nimport forest from \"./sound/fx/forest.mp3\"\n\n// shorten NaN for better sequencer pattern readability (see drumtracks below)\nconst N = NaN;\n\n/* soundSources is the source of all non-user-accessible data. \neach array entry represents one 'track' or sound family, with the following properties:\n\n-sampleLoader: object that holds the URL for every individual sample, together with the chords on which that sample can be played\n-kind: inst, drum of fx - used to make different categories behave in different ways\n-sequencer: soundPlayerInit creates an instance of the Sequencer class here, which holds all sounds (as Howls from howler.js)\n  and the current sequence of the track.\n-baseVolume: can be used to make an entire track louder or softer without having to re-export al samples\n-currentVolume: current volume of the track\n-currentSoundIndex: index of the current sound playing in sequencer.sounds\n-maxSoundsInSequence: amount of sounds per sequence when track activity is 100\n-minSoundsInSequence: amount of sounds per sequence when track activity is 1\n-name: track name\n-init** :stats with which the track will start - accessed in InitializeState\n*/\n\nexport const soundSources : any = [\n//INSTURMENTS////\n  {\n    sampleLoader: [\n      { sampleSource: piano1, chords: ['G'] },\n      { sampleSource: piano2, chords: ['G'] },\n      { sampleSource: piano3, chords: ['G'] },\n      { sampleSource: piano4, chords: ['A'] },\n      { sampleSource: piano5, chords: ['A'] },\n      { sampleSource: piano6, chords: ['A'] },\n      { sampleSource: piano7, chords: ['B'] },\n      { sampleSource: piano8, chords: ['B'] },\n      { sampleSource: piano9, chords: ['B'] },\n      { sampleSource: piano10, chords: ['C'] },\n      { sampleSource: piano11, chords: ['C'] },\n      { sampleSource: piano12, chords: ['C'] },\n      { sampleSource: piano13, chords: ['D'] },\n      { sampleSource: piano14, chords: ['D'] },\n      { sampleSource: piano15, chords: ['D'] },\n      { sampleSource: piano16, chords: ['E'] },\n      { sampleSource: piano17, chords: ['E'] },\n      { sampleSource: piano18, chords: ['E'] },\n      { sampleSource: piano19, chords: ['G','A','C','E'] },\n      { sampleSource: piano20, chords: ['G','A','D','E','B'] },\n      { sampleSource: piano21, chords: ['G','A','C','E'] },\n      { sampleSource: piano22, chords: ['G','A','D','E','B'] },\n      { sampleSource: piano23, chords: ['G','B','E','C','D'] },\n      { sampleSource: piano24, chords: ['G','B','E','C','D'] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.8,\n    maxSoundsInSequence: 8,\n    minSoundsInSequence: 1,\n    name: \"Piano\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: true,\n    initVolume: 100,\n    mutationChance: 0.1,\n  },\n  {\n    sampleLoader: [  \n      { sampleSource: moogbas1, chords: [\"G\"] },\n      { sampleSource: moogbas2, chords: [\"G\"] },\n      { sampleSource: moogbas3, chords: [\"A\"] },\n      { sampleSource: moogbas4, chords: [\"A\"] },\n      { sampleSource: moogbas5, chords: [\"B\"] },\n      { sampleSource: moogbas6, chords: [\"B\"] },\n      { sampleSource: moogbas7, chords: [\"C\"] },\n      { sampleSource: moogbas8, chords: [\"C\"] },\n      { sampleSource: moogbas9, chords: [\"D\"] },\n      { sampleSource: moogbas10, chords: [\"D\"] },\n      { sampleSource: moogbas11, chords: [\"E\"] },\n      { sampleSource: moogbas12, chords: [\"E\"] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.5,\n    maxSoundsInSequence: 12,\n    minSoundsInSequence: 1,\n    name: \"Bass\",\n    initDisabled: false,\n    initActivity: 40,\n    initDrifting: false,\n    initVolume: 100,\n    mutationChance: 0.1,\n  },\n  {\n    sampleLoader: [\n      { sampleSource: synthpad1, chords: ['G','E','C'] },\n      { sampleSource: synthpad2, chords: ['B','D','G','E','C'] },\n      { sampleSource: synthpad3, chords: ['D','A','B'] },\n      { sampleSource: synthpad4, chords: ['B','C','E','G'] },\n      { sampleSource: synthpad5, chords: ['A','C'] },\n      { sampleSource: synthpad6, chords: ['G'] },\n      { sampleSource: synthpad7, chords: ['G','E'] },\n      { sampleSource: synthpad8, chords: ['G','E','C'] },\n      { sampleSource: synthpad9, chords: ['A','D'] },\n      { sampleSource: synthpad10, chords: ['G','E'] },\n      { sampleSource: synthpad11, chords: ['E'] },\n      { sampleSource: synthpad12, chords: ['C','A'] },\n      { sampleSource: synthpad13, chords: ['G','B'] },\n      { sampleSource: synthpad14, chords: ['E','B','G','D'] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.5,\n    maxSoundsInSequence: 5,\n    minSoundsInSequence: 1,\n    name: \"Pad\",\n    initDisabled: false,\n    initActivity: 40,\n    initDrifting: false,\n    initVolume: 50,\n    mutationChance: 0.1,\n  }, \n  /*\n  {\n    sampleLoader: [\n      { sampleSource: kalimba1, chords: ['G','E','C','A','D'] },\n      { sampleSource: kalimba2, chords: ['B','D'] },\n      { sampleSource: kalimba3, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: kalimba4, chords: ['C','E','G'] },\n      { sampleSource: kalimba5, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: kalimba6, chords: ['A','D','C'] },\n      { sampleSource: kalimba7, chords: ['B','D','G'] },\n      { sampleSource: kalimba8, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: kalimba9, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: kalimba10, chords: ['A','C'] },\n      { sampleSource: kalimba11, chords: ['A','C','E'] },\n      { sampleSource: kalimba12, chords: ['D','G','B','E','C'] },\n      { sampleSource: kalimba13, chords: ['A','C','E'] },\n      { sampleSource: kalimba14, chords: ['G','C','E'] },\n      { sampleSource: kalimba15, chords: ['A','C'] }, \n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.7,\n    maxSoundsInSequence: 12,\n    minSoundsInSequence: 1,\n    name: \"Kalimba\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 100,\n    mutationChance: 0.2,\n  }, \n  */\n {\n  sampleLoader: [\n    { sampleSource: duomoog1, chords: ['G','E','C','A'] },\n    { sampleSource: duomoog2, chords: ['D','G','E','A','C'] },\n    { sampleSource: duomoog3, chords: ['D','G','B','E','A','C'] },\n    { sampleSource: duomoog4, chords: ['D','G','A','C'] },\n    { sampleSource: duomoog5, chords: ['D','G','B','E','A','C'] },\n    { sampleSource: duomoog6, chords: ['D','G','B','E','A','C'] },\n    { sampleSource: duomoog7, chords: ['B','D','G','E'] },\n    { sampleSource: duomoog8, chords: ['D','B'] },\n    { sampleSource: duomoog9, chords: ['G','E','C'] },\n    { sampleSource: duomoog10, chords: ['D','B','G'] },\n    { sampleSource: duomoog11, chords: ['A','C'] },\n    { sampleSource: duomoog12, chords: ['G','B'] },\n    { sampleSource: duomoog13, chords: ['G','E'] },\n    { sampleSource: duomoog14, chords: ['D','B'] },\n    { sampleSource: duomoog15, chords: ['E','C'] }, \n    { sampleSource: duomoog16, chords: ['G','E','C'] },\n    { sampleSource: duomoog17, chords: ['C','E'] },\n    { sampleSource: duomoog18, chords: ['A','C','E'] },\n    { sampleSource: duomoog19, chords: ['A'] }, \n  ],\n  kind: \"inst\",\n  sequencer : {},\n  baseVolume: 0.7,\n  maxSoundsInSequence: 12,\n  minSoundsInSequence: 1,\n  name: \"Duomoog\",\n  initDisabled: true,\n  initActivity: 20,\n  initDrifting: false,\n  initVolume: 100,\n  mutationChance: 0.1,\n}, \n/*\n  {\n    sampleLoader: [\n      { sampleSource: strings1, chords: ['G','E'] },\n      { sampleSource: strings2, chords: ['B','G'] },\n      { sampleSource: strings3, chords: ['A','C'] },\n      { sampleSource: strings4, chords: ['C','E'] },\n      { sampleSource: strings5, chords: ['E','G'] },\n      { sampleSource: strings6, chords: ['C'] },\n      { sampleSource: strings7, chords: ['A','E'] },\n      { sampleSource: strings8, chords: ['D','B'] },\n      { sampleSource: strings9, chords: ['G','E','A','C'] },\n      { sampleSource: strings10, chords: ['D','G','B'] },\n      { sampleSource: strings11, chords: ['A','C','E'] },\n      { sampleSource: strings12, chords: ['D','G','B','A'] },\n      { sampleSource: strings13, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: strings14, chords: ['A','C','D'] },\n      { sampleSource: strings15, chords: ['D','G','B'] }, \n      { sampleSource: strings16, chords: ['D','G','B','E','A','C'] }, \n      { sampleSource: strings17, chords: ['D','G','B'] }, \n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.3,\n    maxSoundsInSequence: 3,\n    minSoundsInSequence: 1,\n    name: \"Strings\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 50,\n    mutationChance: 0.1,\n  },\n  */\n  {\n    sampleLoader: [\n      { sampleSource: pluckbas1, chords: ['E','A'] },\n      { sampleSource: pluckbas2, chords: ['D','G'] },\n      { sampleSource: pluckbas3, chords: ['G','E','C'] },\n      { sampleSource: pluckbas4, chords: ['A','D'] },\n      { sampleSource: pluckbas5, chords: ['B','E','G'] },\n      { sampleSource: pluckbas6, chords: ['C','A'] },\n      { sampleSource: pluckbas7, chords: ['D','G','B','E','C'] },\n      { sampleSource: pluckbas8, chords: ['E'] },\n      { sampleSource: pluckbas9, chords: ['D'] },\n      { sampleSource: pluckbas10, chords: ['G'] },\n      { sampleSource: pluckbas11, chords: ['A'] },\n      { sampleSource: pluckbas12, chords: ['B','E','G'] },\n      { sampleSource: pluckbas13, chords: ['C','A'] },\n      { sampleSource: pluckbas14, chords: ['D','G','B','E','C','A'] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.7,\n    maxSoundsInSequence: 8,\n    minSoundsInSequence: 1,\n    name: \"Pluck Bass\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 50,\n    mutationChance: 0.1,\n  },\n  {\n    sampleLoader: [\n      { sampleSource: submarine1, chords: ['D','G','B','E','C'] },\n      { sampleSource: submarine2, chords: ['D','G','E','C','A'] },\n      { sampleSource: submarine3, chords: ['G','B','E','A'] },\n      { sampleSource: submarine4, chords: ['G','E','G','A'] },\n      { sampleSource: submarine5, chords: ['D','G','B','E','A'] },\n      { sampleSource: submarine6, chords: ['D','G','B','E','C','A'] },\n      { sampleSource: submarine7, chords: ['C','A'] },\n      { sampleSource: submarine8, chords: ['D','G','B','E','C','A'] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.5,\n    maxSoundsInSequence: 8,\n    minSoundsInSequence: 1,\n    name: \"Submarine\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 50,\n    mutationChance: 0.1,\n  },\n  //DRUMS///\n  {\n    sampleLoader:[\n      {sampleSource: kick}\n    ],\n    kind: \"drum\",\n    patterns: [\n    //|1           2           3           4          |1           2           3           4         |\n      [0, N, N, N, N, N, N, N, N, N, N, N, N, N, 0, N, 0, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N],\n      [0, N, N, N, N, N, N, N, 0, N, N, N, N, N, 0, N, 0, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N],\n      [0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, 0, N],\n      [0, N, N, 0, 0, N, 0, N, 0, N, N, N, 0, N, 0, N, 0, N, N, N, 0, N, N, N, 0, N, N, 0, N, N, 0, N],\n      ],\n    baseVolume: 1,\n    currentsequence : [],\n    sequencer : {},\n    maxSoundsInSequence: 12,\n    minSoundsInSequence: 1,\n    name: \"Kick\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 100,\n    initPattern: 2,\n    mutationChance: 0.1,\n  },\n  {\n    sampleLoader:[\n      {sampleSource: snare1},\n      {sampleSource: snare2},\n      //{sampleSource: snare3},\n    ],\n    kind: \"drum\",\n    patterns: [\n    //|1           2           3           4          |1           2           3           4         |\n      [N, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N],\n      [N, N, N, N, 0, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N, 0, N, N, N],\n      [N, N, N, 0, N, N, N, N, N, N, N, N, 0, N, N, N, N, 0, N, N, 0, N, N, N, N, N, 0, N, 0, N, N, N],\n      ],\n    baseVolume: 0.5,\n    currentsequence : [],\n    sequencer : {},\n    maxSoundsInSequence: 12,\n    minSoundsInSequence: 1,\n    name: \"Snare\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 100,\n    initPattern: 1,\n    mutationChance: 0.1,\n    },\n//FX//////\n  {\n    sampleLoader: [{ sampleSource: vinyl }],\n    baseVolume: 0.3,\n    kind: \"fx\",\n    name: \"Vinyl\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: true,\n    initVolume: 100,\n  },\n  {\n    sampleLoader: [{ sampleSource: rain }],\n    baseVolume: 0.07,\n    kind: \"fx\",\n    name: \"Rain\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: true,\n    initVolume: 40,\n  },\n  {\n    sampleLoader: [{ sampleSource: forest }],\n    baseVolume: 0.2,\n    kind: \"fx\",\n    name: \"Forest\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 0,\n  },\n];","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/visuals.ts",["90"],"import * as PIXI from \"pixi.js\";\n\nlet app: any;\nlet graph: any;\nlet graphicsArr: any[] = [];\nlet nextCircle = performance.now()+100;\nlet objID = 0;\nconst PI = Math.PI;\n\n\nexport function initGraphics() {\n  //Create a Pixi Application\n  app = new PIXI.Application({\n    width: window.innerWidth,\n    height: window.innerHeight,\n    antialias: true,\n    transparent: true,\n    resolution: 1,\n  });\n\n  document.body.appendChild(app.view);\n\n  graph = new PIXI.Graphics();\n  app.stage.addChild(graph);\n}\n\nclass GraphicsObj {\n    x: number;\n    y: number;\n    angle: number;\n    speed: number;\n    size: number;\n    color: number;\n    creationTime: number;\n    lifeTime: number;\n    id: number;\n    dead: boolean;\n\n    constructor(\n        x: number,\n        y: number,\n        angle: number,\n        speed: number,\n        size: number,\n        color: number,\n    ) {\n        this.x= x;\n        this.y=y;\n        this.angle=angle;\n        this.speed=speed;\n        this.size=size;\n        this.color=color;\n        this.creationTime=performance.now();\n        this.lifeTime = 2000;\n        this.id = objID;\n        objID++;\n        this.dead = false;\n    }\n\n    updatePos(){\n        let velComponents = getVectorComponents(this.angle, this.speed);\n        this.x += velComponents[0];\n        this.y += velComponents[1];\n    }\n\n    draw(){\n        graph.beginFill(this.color)\n        graph.drawCircle(this.x, this.y, this.size)\n        graph.endFill()\n    }\n}\n\nexport function updateGraphics(){\n    graph.clear();\n\n    if (performance.now() > nextCircle){\n        nextCircle += 300;\n        graphicsArr.push(new GraphicsObj(\n            600,\n            400,\n            0,\n            4,\n            Math.random() * 20 + 20,\n            0x00FFAA\n        ))\n    }\n\n    let deadIndexes: number[] = [];\n    graphicsArr.forEach((obj: any, index: number)=>{\n        obj.updatePos();\n        obj.draw();\n        if (performance.now() > obj.creationTime + obj.lifeTime){\n            deadIndexes.push(index);\n        }\n    })\n\n    graphicsArr.reverse();\n\n    deadIndexes.forEach((index: number)=>{\n        graphicsArr.splice(graphicsArr.length-1-index, 1)\n    })\n\n}\n\n\n\nfunction getVectorComponents(direction: number, speed: number) {\n    return [Math.cos(direction) * speed, Math.sin(direction) * speed];\n  }",["91","92"],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":323,"column":55,"nodeType":"99","messageId":"100","endLine":323,"endColumn":57},{"ruleId":"97","severity":1,"message":"98","line":408,"column":55,"nodeType":"99","messageId":"100","endLine":408,"endColumn":57},{"ruleId":"97","severity":1,"message":"98","line":459,"column":55,"nodeType":"99","messageId":"100","endLine":459,"endColumn":57},{"ruleId":"101","severity":1,"message":"102","line":4,"column":10,"nodeType":"103","messageId":"104","endLine":4,"endColumn":29},{"ruleId":"101","severity":1,"message":"105","line":268,"column":11,"nodeType":"103","messageId":"104","endLine":268,"endColumn":36},{"ruleId":"101","severity":1,"message":"106","line":49,"column":8,"nodeType":"103","messageId":"104","endLine":49,"endColumn":17},{"ruleId":"101","severity":1,"message":"107","line":50,"column":8,"nodeType":"103","messageId":"104","endLine":50,"endColumn":17},{"ruleId":"101","severity":1,"message":"108","line":51,"column":8,"nodeType":"103","messageId":"104","endLine":51,"endColumn":17},{"ruleId":"101","severity":1,"message":"109","line":52,"column":8,"nodeType":"103","messageId":"104","endLine":52,"endColumn":17},{"ruleId":"101","severity":1,"message":"110","line":53,"column":8,"nodeType":"103","messageId":"104","endLine":53,"endColumn":17},{"ruleId":"101","severity":1,"message":"111","line":54,"column":8,"nodeType":"103","messageId":"104","endLine":54,"endColumn":17},{"ruleId":"101","severity":1,"message":"112","line":55,"column":8,"nodeType":"103","messageId":"104","endLine":55,"endColumn":17},{"ruleId":"101","severity":1,"message":"113","line":56,"column":8,"nodeType":"103","messageId":"104","endLine":56,"endColumn":17},{"ruleId":"101","severity":1,"message":"114","line":57,"column":8,"nodeType":"103","messageId":"104","endLine":57,"endColumn":17},{"ruleId":"101","severity":1,"message":"115","line":58,"column":8,"nodeType":"103","messageId":"104","endLine":58,"endColumn":18},{"ruleId":"101","severity":1,"message":"116","line":59,"column":8,"nodeType":"103","messageId":"104","endLine":59,"endColumn":18},{"ruleId":"101","severity":1,"message":"117","line":60,"column":8,"nodeType":"103","messageId":"104","endLine":60,"endColumn":18},{"ruleId":"101","severity":1,"message":"118","line":61,"column":8,"nodeType":"103","messageId":"104","endLine":61,"endColumn":18},{"ruleId":"101","severity":1,"message":"119","line":62,"column":8,"nodeType":"103","messageId":"104","endLine":62,"endColumn":18},{"ruleId":"101","severity":1,"message":"120","line":93,"column":8,"nodeType":"103","messageId":"104","endLine":93,"endColumn":16},{"ruleId":"101","severity":1,"message":"121","line":94,"column":8,"nodeType":"103","messageId":"104","endLine":94,"endColumn":16},{"ruleId":"101","severity":1,"message":"122","line":95,"column":8,"nodeType":"103","messageId":"104","endLine":95,"endColumn":16},{"ruleId":"101","severity":1,"message":"123","line":96,"column":8,"nodeType":"103","messageId":"104","endLine":96,"endColumn":16},{"ruleId":"101","severity":1,"message":"124","line":97,"column":8,"nodeType":"103","messageId":"104","endLine":97,"endColumn":16},{"ruleId":"101","severity":1,"message":"125","line":98,"column":8,"nodeType":"103","messageId":"104","endLine":98,"endColumn":16},{"ruleId":"101","severity":1,"message":"126","line":99,"column":8,"nodeType":"103","messageId":"104","endLine":99,"endColumn":16},{"ruleId":"101","severity":1,"message":"127","line":100,"column":8,"nodeType":"103","messageId":"104","endLine":100,"endColumn":16},{"ruleId":"101","severity":1,"message":"128","line":101,"column":8,"nodeType":"103","messageId":"104","endLine":101,"endColumn":16},{"ruleId":"101","severity":1,"message":"129","line":102,"column":8,"nodeType":"103","messageId":"104","endLine":102,"endColumn":17},{"ruleId":"101","severity":1,"message":"130","line":103,"column":8,"nodeType":"103","messageId":"104","endLine":103,"endColumn":17},{"ruleId":"101","severity":1,"message":"131","line":104,"column":8,"nodeType":"103","messageId":"104","endLine":104,"endColumn":17},{"ruleId":"101","severity":1,"message":"132","line":105,"column":8,"nodeType":"103","messageId":"104","endLine":105,"endColumn":17},{"ruleId":"101","severity":1,"message":"133","line":106,"column":8,"nodeType":"103","messageId":"104","endLine":106,"endColumn":17},{"ruleId":"101","severity":1,"message":"134","line":107,"column":8,"nodeType":"103","messageId":"104","endLine":107,"endColumn":17},{"ruleId":"101","severity":1,"message":"135","line":109,"column":8,"nodeType":"103","messageId":"104","endLine":109,"endColumn":16},{"ruleId":"101","severity":1,"message":"136","line":110,"column":8,"nodeType":"103","messageId":"104","endLine":110,"endColumn":16},{"ruleId":"101","severity":1,"message":"137","line":111,"column":8,"nodeType":"103","messageId":"104","endLine":111,"endColumn":16},{"ruleId":"101","severity":1,"message":"138","line":112,"column":8,"nodeType":"103","messageId":"104","endLine":112,"endColumn":16},{"ruleId":"101","severity":1,"message":"139","line":113,"column":8,"nodeType":"103","messageId":"104","endLine":113,"endColumn":16},{"ruleId":"101","severity":1,"message":"140","line":114,"column":8,"nodeType":"103","messageId":"104","endLine":114,"endColumn":16},{"ruleId":"101","severity":1,"message":"141","line":115,"column":8,"nodeType":"103","messageId":"104","endLine":115,"endColumn":16},{"ruleId":"101","severity":1,"message":"142","line":116,"column":8,"nodeType":"103","messageId":"104","endLine":116,"endColumn":16},{"ruleId":"101","severity":1,"message":"143","line":117,"column":8,"nodeType":"103","messageId":"104","endLine":117,"endColumn":16},{"ruleId":"101","severity":1,"message":"144","line":118,"column":8,"nodeType":"103","messageId":"104","endLine":118,"endColumn":17},{"ruleId":"101","severity":1,"message":"145","line":119,"column":8,"nodeType":"103","messageId":"104","endLine":119,"endColumn":17},{"ruleId":"101","severity":1,"message":"146","line":120,"column":8,"nodeType":"103","messageId":"104","endLine":120,"endColumn":17},{"ruleId":"101","severity":1,"message":"147","line":121,"column":8,"nodeType":"103","messageId":"104","endLine":121,"endColumn":17},{"ruleId":"101","severity":1,"message":"148","line":122,"column":8,"nodeType":"103","messageId":"104","endLine":122,"endColumn":17},{"ruleId":"101","severity":1,"message":"149","line":123,"column":8,"nodeType":"103","messageId":"104","endLine":123,"endColumn":17},{"ruleId":"101","severity":1,"message":"150","line":124,"column":8,"nodeType":"103","messageId":"104","endLine":124,"endColumn":17},{"ruleId":"101","severity":1,"message":"151","line":125,"column":8,"nodeType":"103","messageId":"104","endLine":125,"endColumn":17},{"ruleId":"101","severity":1,"message":"152","line":174,"column":8,"nodeType":"103","messageId":"104","endLine":174,"endColumn":14},{"ruleId":"101","severity":1,"message":"153","line":8,"column":7,"nodeType":"103","messageId":"104","endLine":8,"endColumn":9},{"ruleId":"93","replacedBy":"154"},{"ruleId":"95","replacedBy":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","@typescript-eslint/no-unused-vars","'SSL_OP_NO_QUERY_MTU' is defined but never used.","Identifier","unusedVar","'getRandomIntButNotThisOne' is defined but never used.","'synthbas1' is defined but never used.","'synthbas2' is defined but never used.","'synthbas3' is defined but never used.","'synthbas4' is defined but never used.","'synthbas5' is defined but never used.","'synthbas6' is defined but never used.","'synthbas7' is defined but never used.","'synthbas8' is defined but never used.","'synthbas9' is defined but never used.","'synthbas10' is defined but never used.","'synthbas11' is defined but never used.","'synthbas12' is defined but never used.","'synthbas13' is defined but never used.","'synthbas14' is defined but never used.","'kalimba1' is defined but never used.","'kalimba2' is defined but never used.","'kalimba3' is defined but never used.","'kalimba4' is defined but never used.","'kalimba5' is defined but never used.","'kalimba6' is defined but never used.","'kalimba7' is defined but never used.","'kalimba8' is defined but never used.","'kalimba9' is defined but never used.","'kalimba10' is defined but never used.","'kalimba11' is defined but never used.","'kalimba12' is defined but never used.","'kalimba13' is defined but never used.","'kalimba14' is defined but never used.","'kalimba15' is defined but never used.","'strings1' is defined but never used.","'strings2' is defined but never used.","'strings3' is defined but never used.","'strings4' is defined but never used.","'strings5' is defined but never used.","'strings6' is defined but never used.","'strings7' is defined but never used.","'strings8' is defined but never used.","'strings9' is defined but never used.","'strings10' is defined but never used.","'strings11' is defined but never used.","'strings12' is defined but never used.","'strings13' is defined but never used.","'strings14' is defined but never used.","'strings15' is defined but never used.","'strings16' is defined but never used.","'strings17' is defined but never used.","'snare3' is defined but never used.","'PI' is assigned a value but never used.",["156"],["157"],"no-global-assign","no-unsafe-negation"]