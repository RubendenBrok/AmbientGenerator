[{"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/index.tsx":"1","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/App.tsx":"2","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/drift.ts":"3","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundplayer.ts":"4","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundsources.ts":"5","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/visuals.ts":"6","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/chordcontainer.tsx":"7","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/loadingscreen.tsx":"8","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/mobileui.tsx":"9"},{"size":222,"mtime":1623276419000,"results":"10","hashOfConfig":"11"},{"size":33048,"mtime":1623533191000,"results":"12","hashOfConfig":"11"},{"size":1025,"mtime":1613054079000,"results":"13","hashOfConfig":"11"},{"size":6700,"mtime":1614793710000,"results":"14","hashOfConfig":"11"},{"size":21529,"mtime":1614793102000,"results":"15","hashOfConfig":"11"},{"size":9581,"mtime":1623533561000,"results":"16","hashOfConfig":"11"},{"size":2470,"mtime":1623533311000,"results":"17","hashOfConfig":"11"},{"size":1765,"mtime":1623276419000,"results":"18","hashOfConfig":"11"},{"size":9157,"mtime":1623529577000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"asqc5z",{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/index.tsx",[],["40","41"],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/App.tsx",["42","43","44","45","46","47"],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/drift.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundplayer.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundsources.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/visuals.ts",["48"],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/chordcontainer.tsx",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/loadingscreen.tsx",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/mobileui.tsx",["49","50","51","52"],"import {\n  keys,\n  amountOfSounds,\n  amountOfSoundsLoaded,\n  ControlledSlider,\n  IconContainer,\n  minBpm,\n  maxBpm,\n} from \"./App\";\nimport React, { useState, useEffect } from \"react\";\nimport { soundSources } from \"./soundsources\";\nimport { colors } from \"./visuals\";\nimport LoadingScreen from \"./loadingscreen\";\n\nimport minus from \"./img/minus.svg\";\nimport plus from \"./img/plus.svg\";\nimport volumeOn from \"./img/volumeon.svg\";\nimport volumeOff from \"./img/volumeoff.svg\";\nimport play from \"./img/play.svg\";\nimport pause from \"./img/pause.svg\";\nimport turtle from \"./img/turtle.svg\";\nimport rabbit from \"./img/rabbit.svg\";\n\nimport \"./mobile.css\";\n\nexport const MobileUI = ({\n  state,\n  startApp,\n  handleTrackSelect,\n  handleVolumeChange,\n  handleActivityChange,\n  handlePatternChange,\n  handleDisableToggle,\n  handlePlayingToggle,\n  handleDriftToggle,\n  handleBpmChange,\n  handleVolumeClick,\n  handleActivityClick,\n  handlePatternClick,\n}: any) => {\n  const [trackOpen, setTrackOpen] = useState(false);\n\n  const [openIndex, setOpenIndex] = useState(0);\n\n  const handleTrackClick = (index: number, open: boolean) => {\n    setTrackOpen(open);\n    setOpenIndex(index);\n    handleTrackSelect(index, open);\n  };\n\n  return (\n    <div className=\"mobileUIContainer\">\n      <LoadingScreen\n        loaded={state.loaded}\n        started={state.appStarted}\n        hideOpeningScreen={state.hideOpeningScreen}\n        startApp={startApp}\n        loadingAnimPoints={state.loadingAnimPoints}\n        totalSounds={amountOfSounds}\n        loadedSounds={amountOfSoundsLoaded}\n      />\n      {!trackOpen && (\n        <div className=\"mobileUIContainerBase\">\n          <div className=\"mobileTrackContainer\">\n            {soundSources.map((track: any, index: number) => {\n              if (track.kind === \"drum\" || track.kind === \"inst\") {\n                return (\n                  <MobileTrackButton\n                    handleTrackClick={handleTrackClick}\n                    key={index}\n                    index={index}\n                    nowPlaying={state[keys.nowPlaying + index]}\n                    disabled={state[keys.disabledKey + index]}\n                  />\n                );\n              }\n            })}\n          </div>\n          <MobileSideButtons\n            handlePlayingToggle={handlePlayingToggle}\n            handleDriftToggle={handleDriftToggle}\n            playing={state.playing}\n            drifting={state.drifting}\n          />\n        </div>\n      )}\n      {trackOpen && (\n        <MobileTrackEditor\n          state={state}\n          openIndex={openIndex}\n          handleTrackClick={handleTrackClick}\n          handleVolumeChange={handleVolumeChange}\n          handlePatternChange={handlePatternChange}\n          handleActivityChange={handleActivityChange}\n          handleDisableToggle={handleDisableToggle}\n          handleVolumeClick={handleVolumeClick}\n          handleActivityClick={handleActivityClick}\n          handlePatternClick={handlePatternClick}\n        />\n      )}\n      <div className=\"mobileUIContainerBottom\">\n        <div className=\"trackSlider\">\n          <img className=\"speedIcon\" src={turtle} />\n          <ControlledSlider\n            vertical={false}\n            index={0}\n            value={state.bpm}\n            onChange={handleBpmChange}\n            min={minBpm}\n            max={maxBpm}\n          />\n          <img className=\"speedIcon\" src={rabbit} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MobileSideButtons = React.memo(function MobileSideButtons({\n  handlePlayingToggle,\n  handleDriftToggle,\n  playing,\n  drifting,\n}: any) {\n  let playIcon: string;\n  playing ? (playIcon = pause) : (playIcon = play);\n  return (\n    <div className={\"mobileButtonContainer\"}>\n      <div\n        className=\"mobileButton\"\n        onClick={handlePlayingToggle}\n        style={{ backgroundImage: \"url('\" + playIcon + \"')\" }}\n      ></div>\n      <div className=\"mobileButton \">\n        <div className=\"mobileHelp\">?</div>\n      </div>\n      <div className=\"mobileButton \" onClick={handleDriftToggle}>\n        <div\n          className={drifting ? \"mobileHelp flash\" : \"mobileHelp\"}\n          style={{ fontSize: \"1rem\" }}\n        >\n          {drifting ? \"EVOLVING\" : \"EVOLVE\"}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nconst MobileTrackButton = React.memo(function MobileTrackButton({\n  handleTrackClick,\n  index,\n  nowPlaying,\n  disabled,\n}: any) {\n  let colorStr = colors[index].toString(16);\n  colorStr = \"#\".concat(colorStr);\n\n  let shadow: string;\n  nowPlaying\n    ? (shadow = `0px 0px 15px #${colors[index].toString(16)}`)\n    : (shadow = `0px 0px 5px #${colors[index].toString(16)}`);\n\n  let indicatorClass = \"mobileTrackIndicator\";\n\n  if (disabled) {\n    indicatorClass += \" disabled\";\n  }\n\n  return (\n    <div className=\"mobileTrack\">\n      <div\n        className={indicatorClass}\n        style={{\n          backgroundColor: colorStr,\n          boxShadow: shadow,\n        }}\n        onClick={() => handleTrackClick(index, true)}\n      ></div>\n    </div>\n  );\n});\n\nconst MobileTrackEditor = React.memo(function MobileTrackEditor({\n  openIndex,\n  nowPlaying,\n  state,\n  handleTrackClick,\n  handleVolumeChange,\n  handleActivityChange,\n  handlePatternChange,\n  handleDisableToggle,\n  handleVolumeClick,\n  handleActivityClick,\n  handlePatternClick,\n}: any) {\n  let colorStr = colors[openIndex].toString(16);\n  colorStr = \"#\".concat(colorStr);\n\n  let shadow: string;\n  nowPlaying\n    ? (shadow = `0px 0px 15px #${colors[openIndex].toString(16)}`)\n    : (shadow = `0px 0px 5px #${colors[openIndex].toString(16)}`);\n\n  let indicatorClass = \"mobileTrackIndicator single\";\n\n  if (state[keys.disabledKey + openIndex]) {\n    indicatorClass += \" disabled\";\n  }\n\n  return (\n    <div className=\"mobileTrackEditor\">\n      <div className=\"mobileTrackEditorTop\">\n        <div className=\"mobileTrackIndicatorEditor\">\n          <div\n            className={indicatorClass}\n            style={{\n              backgroundColor: colorStr,\n              boxShadow: shadow,\n            }}\n            onClick={() =>\n              handleDisableToggle(\n                state[keys.disabledKey + openIndex],\n                openIndex\n              )\n            }\n          ></div>\n        </div>\n        <div className=\"trackUI\">\n          <div className=\"trackSliderContainer\">\n            <div className=\"trackSlider\">\n              <IconContainer\n                icon1={volumeOff}\n                click={() => handleVolumeClick(-10, openIndex)}\n              />\n              <ControlledSlider\n                value={state[keys.volKey + openIndex]}\n                onChange={handleVolumeChange}\n                disabled={state[keys.disabledKey + openIndex]}\n                index={openIndex}\n                min={0}\n                max={100}\n                step={1}\n              />\n              <IconContainer\n                icon1={volumeOn}\n                click={() => handleVolumeClick(10, openIndex)}\n              />\n            </div>\n            {soundSources[openIndex].kind === \"inst\" ? (\n              <div className=\"trackSlider\">\n                <IconContainer\n                  icon1={minus}\n                  click={() => handleActivityClick(-10, openIndex)}\n                />\n                <ControlledSlider\n                  value={state[keys.actKey + openIndex]}\n                  onChange={handleActivityChange}\n                  disabled={state[keys.disabledKey + openIndex]}\n                  index={openIndex}\n                  min={0}\n                  max={100}\n                  step={1}\n                />\n                <IconContainer\n                  icon1={plus}\n                  click={() => handleActivityClick(10, openIndex)}\n                />\n              </div>\n            ) : (\n              <div className=\"trackSlider\">\n                <IconContainer\n                  icon1={minus}\n                  click={() => handlePatternClick(-1, openIndex)}\n                />\n                <ControlledSlider\n                  value={state[keys.patKey + openIndex]}\n                  onChange={handlePatternChange}\n                  disabled={state[keys.disabledKey + openIndex]}\n                  index={openIndex}\n                  min={1}\n                  max={soundSources[openIndex].patterns.length}\n                  step={1}\n                />\n                <IconContainer\n                  icon1={plus}\n                  click={() => handlePatternClick(1, openIndex)}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"mobileEditorButtonContainer\">\n        <div\n          className=\"mobileEditorButton\"\n          onClick={() =>\n            handleDisableToggle(state[keys.disabledKey + openIndex], openIndex)\n          }\n        >\n          <u className={state[keys.disabledKey + openIndex] ? \"flash\" : \"\"}>\n            {state[keys.disabledKey + openIndex] ? \"TURN ON\" : \"TURN OFF\"}\n          </u>\n        </div>\n        <div\n          className=\"mobileEditorButton\"\n          onClick={() => handleTrackClick(openIndex, false)}\n        >\n          <u>CLOSE</u>\n        </div>\n      </div>\n    </div>\n  );\n});\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":631,"column":53,"nodeType":"59","messageId":"60","endLine":631,"endColumn":55},{"ruleId":"57","severity":1,"message":"58","line":772,"column":53,"nodeType":"59","messageId":"60","endLine":772,"endColumn":55},{"ruleId":"61","severity":1,"message":"62","line":807,"column":9,"nodeType":"63","endLine":807,"endColumn":51},{"ruleId":"61","severity":1,"message":"62","line":816,"column":9,"nodeType":"63","endLine":816,"endColumn":51},{"ruleId":"57","severity":1,"message":"58","line":852,"column":57,"nodeType":"59","messageId":"60","endLine":852,"endColumn":59},{"ruleId":"61","severity":1,"message":"62","line":905,"column":7,"nodeType":"63","endLine":905,"endColumn":47},{"ruleId":"64","severity":1,"message":"65","line":28,"column":5,"nodeType":"66","messageId":"67","endLine":28,"endColumn":21},{"ruleId":"64","severity":1,"message":"68","line":10,"column":27,"nodeType":"66","messageId":"67","endLine":10,"endColumn":36},{"ruleId":"57","severity":1,"message":"58","line":65,"column":59,"nodeType":"59","messageId":"60","endLine":65,"endColumn":61},{"ruleId":"61","severity":1,"message":"62","line":103,"column":11,"nodeType":"63","endLine":103,"endColumn":53},{"ruleId":"61","severity":1,"message":"62","line":112,"column":11,"nodeType":"63","endLine":112,"endColumn":53},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'driftButton' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]