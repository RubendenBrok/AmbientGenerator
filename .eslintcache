[{"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/index.tsx":"1","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/reportWebVitals.ts":"2","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/App.tsx":"3","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/drift.ts":"4","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundplayer.ts":"5","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundsources.ts":"6"},{"size":608,"mtime":1612171079000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1611927196000,"results":"9","hashOfConfig":"8"},{"size":8857,"mtime":1612455417000,"results":"10","hashOfConfig":"8"},{"size":1572,"mtime":1612348977000,"results":"11","hashOfConfig":"8"},{"size":6576,"mtime":1612457203000,"results":"12","hashOfConfig":"8"},{"size":7975,"mtime":1612457143000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"asqc5z",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/index.tsx",[],["28","29"],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/reportWebVitals.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/App.tsx",["30","31","32"],"import { request } from \"https\";\nimport React, { useState } from \"react\";\nimport { updateTrackDrift } from \"./drift\"\nimport { initSoundPlayer, updateSoundPlayer, setTrackVolume, setTrackDisable, setTrackActivity, toggleRhythmic, updateBPM, updateCurrentSequenceChords } from \"./soundplayer\"\nimport \"./App.css\";\nimport { isPropertySignature } from \"typescript\";\n\nexport class App extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      tracks: [\n        {\n          index: 0,\n          volume: 50,\n          activity: 50,\n          volDriftVelocity: 0,\n          actDriftVelocity: 0,\n          drifting: false,\n          disabled: false,\n        },\n        {\n          index: 1,\n          volume: 50,\n          activity: 50,\n          volDriftVelocity: 0,\n          actDriftVelocity: 0,\n          drifting: false,\n          disabled: false,\n        },\n        {\n          index: 2,\n          volume: 50,\n          activity: 50,\n          volDriftVelocity: 0,\n          actDriftVelocity: 0,\n          drifting: false,\n          disabled: false,\n        },\n        {\n          index: 3,\n          volume: 50,\n          activity: 50,\n          volDriftVelocity: 0,\n          actDriftVelocity: 0,\n          drifting: false,\n          disabled: false,\n        },\n        //{ index: 4, volume: 50, activity: 50, volDriftVelocity: 0, actDriftVelocity: 0, drifting: false, disabled: false},\n      ],\n      currentChord: \"G\",\n      rhythmic: false,\n      bpm: 100\n    };\n\n    this.appLoop = this.appLoop.bind(this);\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n    this.handleActivityChange = this.handleActivityChange.bind(this);\n    this.handleDriftToggle = this.handleDriftToggle.bind(this);\n    this.handleDisableToggle = this.handleDisableToggle.bind(this);\n    this.handleBpmChange = this.handleBpmChange.bind(this);\n    this.handleRhythmicToggle = this.handleRhythmicToggle.bind(this);\n    this.handleChordClick = this.handleChordClick.bind(this);\n  }\n\n  appLoop() {\n    const newTrackState = updateTrackDrift(this.state.tracks);\n    newTrackState.forEach((track: any, index: number) => {\n      if (track.volume !== this.state.volume) {\n        this.handleVolumeChange(track.volume, index);\n      }\n      if (track.activity !== this.state.activity) {\n        this.handleActivityChange(track.activity, index);\n      }\n    });\n\n    updateSoundPlayer(this.state.tracks, this.state.currentChord)\n\n    window.requestAnimationFrame(this.appLoop);\n  }\n\n  handleVolumeChange(value: any, index: number) {\n    let newTrackState = this.state.tracks;\n    newTrackState[index].volume = parseFloat(value);\n    this.setState({ tracks: newTrackState }, () =>\n      setTrackVolume(this.state.tracks[index].volume, index)\n    );\n  }\n\n  handleActivityChange(value: any, index: number) {\n    let newTrackState = this.state.tracks;\n    newTrackState[index].activity = parseFloat(value);\n    this.setState({ tracks: newTrackState }, () =>\n      setTrackActivity(this.state.tracks[index].activity, index)\n    );\n  }\n\n  handleDriftToggle(value :boolean, index: number) {\n    let newTrackState = this.state.tracks;\n    newTrackState[index].drifting = value;\n    this.setState({ tracks: newTrackState });\n  }\n\n  handleDisableToggle(value : boolean, index: number) {\n    let newTrackState = this.state.tracks;\n    newTrackState[index].disabled = !value;\n    this.setState({ tracks: newTrackState }, () => {\n      setTrackDisable(this.state.tracks, index);\n    });\n  }\n\n  handleChordClick(chord: string) {\n    if (chord !== this.state.currentChord){\n      this.setState({ currentChord: chord }, () => updateCurrentSequenceChords(this.state.currentChord));\n    }\n  }\n\n  handleBpmChange(newBpm : number){\n    this.setState( {bpm : newBpm}, () => updateBPM(this.state.bpm) )\n  }\n\n  handleRhythmicToggle(value : boolean){\n    this.setState( {rhythmic : value}, () => toggleRhythmic(this.state.rhythmic, this.state.tracks) )\n  }\n\n  render() {\n    return (\n      <div>\n        <FaderContainer\n          numberOfTracks={this.state.numberOfTracks}\n          tracks={this.state.tracks}\n          handleVolumeChange={this.handleVolumeChange}\n          handleActivityChange={this.handleActivityChange}\n          handleDriftToggle={this.handleDriftToggle}\n          handleDisableToggle={this.handleDisableToggle}\n        />\n        <RhythmContainer\n          rhythmic={this.state.rhythmic}\n          bpm={this.state.bpm}\n          handleBpmChange={this.handleBpmChange}\n          handleRhythmicToggle={this.handleRhythmicToggle}\n        />\n        <ChordContainer\n          currentChord={this.state.currentChord}\n          handleChordClick={this.handleChordClick}\n        />\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    initSoundPlayer(this.state.tracks, this.state.bpm);\n    this.appLoop();\n  }\n}\n\nfunction FaderContainer(props : any){\n    return (\n      <div className = \"FaderContainer\">\n        {props.tracks.map((track : any) => {\n          return (\n            <TrackUI \n              index = {track.index} \n              volume = {track.volume} \n              activity = {track.activity} \n              disabled = {track.disabled}\n              key = {track.index} \n              handleVolumeChange = {props.handleVolumeChange}\n              handleActivityChange = {props.handleActivityChange}\n              handleDriftToggle = {props.handleDriftToggle}\n              handleDisableToggle = {props.handleDisableToggle}\n              />\n          )})\n        }\n      </div>\n    )\n}\n\n//class TrackUI extends React.Component<any, any> {\nfunction TrackUI(props : any) {\n    return (\n      <div className=\"TrackUI\">\n        <p>This is track number {props.index}</p>\n        <p>its volume is {Math.round(props.volume)}</p>\n        <p>\n          <ControlledSlider\n            value={props.volume}\n            onChange={props.handleVolumeChange}\n            disabled={props.disabled}\n            index={props.index}\n            min={0}\n            max={100}\n          />\n        </p>\n        <p>its activity is {Math.round(props.activity)}</p>\n        <p>\n          <ControlledSlider\n            value={props.activity}\n            onChange={props.handleActivityChange}\n            disabled={props.disabled}\n            index={props.index}\n            min={0}\n            max={100}\n          />\n        </p>\n        <p>\n          Drift:{\" \"}\n          <ControlledCheckbox\n            index={props.index}\n            checked={props.drifting}\n            onChange={props.handleDriftToggle}\n            disabled={props.disabled}\n          />\n        </p>\n        <p>\n          Enabled:{\" \"}\n          <ControlledCheckbox\n            index={props.index}\n            checked={!props.disabled}\n            onChange={props.handleDisableToggle}\n            disabled={false}\n          />\n        </p>\n      </div>\n    );\n  }\n\nfunction RhythmContainer(props : any){\n  return (\n    <div className = \"RhythmContainer\">\n    <p>Rhythmic:{\" \"}\n    <ControlledCheckbox \n      index = {0}\n      checked = {props.rhythmic}\n      onChange = {props.handleRhythmicToggle}\n      disabled = {false}\n    />\n    </p>\n    <p>\n      The current BPM is {props.bpm}\n    </p>\n    <ControlledSlider \n      index = {0}\n      value = {props.bpm}\n      onChange = {props.handleBpmChange}\n      min={40}\n      max={130}\n      />\n    </div>\n  )\n}\n\n\nfunction ChordContainer(props : any){\n  return (\n    <div className = \"ChordContainer\">\n      <ChordButton value = \"G\" name = \"G\" handleChordClick = {props.handleChordClick} />\n      <ChordButton value = \"A\" name = \"Am\" handleChordClick = {props.handleChordClick} />\n      <ChordButton value = \"B\" name = \"Bm\" handleChordClick = {props.handleChordClick} />\n      <ChordButton value = \"C\" name = \"C\" handleChordClick = {props.handleChordClick} />\n      <ChordButton value = \"D\" name = \"D\" handleChordClick = {props.handleChordClick} />\n      <ChordButton value = \"E\" name = \"Em\" handleChordClick = {props.handleChordClick} />\n      the current chord is {props.currentChord}\n    </div>\n  )\n}\n\nfunction ChordButton(props : any){\n  return (\n    <div className = \"ChordButton\">\n      <button onClick = { () => props.handleChordClick(props.value) }>\n      {props.name}</button>\n    </div>\n  )\n}\n\nfunction ControlledSlider(props : any){\n  function handleChange(event : any){\n    props.onChange(event.target.value, props.index)\n  }\n  return (\n    <input\n    type=\"range\"\n    value={props.value}\n    onChange={handleChange}\n    disabled={props.disabled}\n    min={props.min}\n    max={props.max}\n  ></input>\n  )\n}\n\nfunction ControlledCheckbox(props : any){\n  function handleChange(event : any){\n    props.onChange(event.target.checked, props.index)\n  }\n  return (\n    <input\n    type=\"checkbox\"\n    checked={props.checked}\n    onChange={handleChange}\n    disabled={props.disabled}\n  ></input>\n  )\n}\n\nexport default App;\n\n","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/drift.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundplayer.ts",["33","34","35","36"],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundsources.ts",["37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":10,"nodeType":"44","messageId":"45","endLine":1,"endColumn":17},{"ruleId":"42","severity":1,"message":"46","line":2,"column":17,"nodeType":"44","messageId":"45","endLine":2,"endColumn":25},{"ruleId":"42","severity":1,"message":"47","line":6,"column":10,"nodeType":"44","messageId":"45","endLine":6,"endColumn":29},{"ruleId":"42","severity":1,"message":"48","line":1,"column":10,"nodeType":"44","messageId":"45","endLine":1,"endColumn":14},{"ruleId":"42","severity":1,"message":"49","line":2,"column":16,"nodeType":"44","messageId":"45","endLine":2,"endColumn":22},{"ruleId":"42","severity":1,"message":"50","line":3,"column":10,"nodeType":"44","messageId":"45","endLine":3,"endColumn":15},{"ruleId":"42","severity":1,"message":"51","line":132,"column":15,"nodeType":"44","messageId":"45","endLine":132,"endColumn":40},{"ruleId":"42","severity":1,"message":"52","line":68,"column":8,"nodeType":"44","messageId":"45","endLine":68,"endColumn":17},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"@typescript-eslint/no-unused-vars","'request' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'isPropertySignature' is defined but never used.","'time' is defined but never used.","'Howler' is defined but never used.","'start' is defined but never used.","'getRandomIntButNotThisOne' is defined but never used.","'kalimba16' is defined but never used.","no-global-assign","no-unsafe-negation"]