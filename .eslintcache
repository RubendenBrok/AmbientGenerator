[{"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/index.tsx":"1","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/reportWebVitals.ts":"2","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/App.tsx":"3","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/drift.ts":"4","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundplayer.ts":"5","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundsources.ts":"6"},{"size":502,"mtime":1612961605000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1611927196000,"results":"9","hashOfConfig":"8"},{"size":19773,"mtime":1613062184000,"results":"10","hashOfConfig":"8"},{"size":1025,"mtime":1613054079000,"results":"11","hashOfConfig":"8"},{"size":10257,"mtime":1613057971000,"results":"12","hashOfConfig":"8"},{"size":15314,"mtime":1613060732000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"asqc5z",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/index.tsx",[],["29","30"],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/reportWebVitals.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/App.tsx",["31","32","33"],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/drift.ts",[],"/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundplayer.ts",["34","35"],"import { Howl, Howler } from \"howler\"\nimport { soundSources } from \"./soundsources\"\nimport { keys, seqLength, randomArrEntry } from \"./App\"\nimport { SSL_OP_NO_QUERY_MTU } from \"constants\";\n\nclass Sequencer {\n  disabled: boolean;\n  sounds: any[];\n  currentSequence: number[];\n  currentSoundIndex: number;\n  activity: number;\n  noteAmt: number;\n  patterns: any;\n  tonal : boolean;\n  maxSoundsInSequence: number;\n  minSoundsInSequence: number;\n  initPattern: number;\n\n  constructor(\n    sounds: any[],\n    activity: number,\n    disabled: boolean,\n    patterns: any,\n    tonal: boolean,\n    maxSoundsInSequence: number,\n    minSoundsInSequence: number,\n    currentChord: string,\n    initPattern: number\n  ) {\n    this.sounds = sounds;\n    this.disabled = disabled;\n    this.currentSequence = [];\n    this.activity = activity;\n    this.noteAmt = 0;\n    this.patterns = patterns;\n    this.tonal = tonal;\n    this.currentSoundIndex = 0;\n    this.maxSoundsInSequence = maxSoundsInSequence;\n    this.minSoundsInSequence = minSoundsInSequence;\n    this.initPattern = initPattern\n\n    this.build(currentChord, initPattern);\n  }\n\n  calcAmountOfNotes() {\n    this.noteAmt =\n      this.minSoundsInSequence +\n      Math.floor((this.activity / 100) * this.maxSoundsInSequence);\n  }\n\n  build(currentChord : string, initPattern : number) {\n    if (this.patterns) {\n      this.buildFromPattern(initPattern)\n    } else {\n      this.buildFromActivity(currentChord)\n    }\n  }\n\n  buildFromActivity(currentChord : string){\n    this.calcAmountOfNotes();\n    this.currentSequence = [];\n    let possibleIndexes = [];\n    for (let i = 0; i < seqLength; i++) {\n      this.currentSequence.push(NaN);\n      possibleIndexes.push(i);\n    }\n    for (let i = 0; i < this.noteAmt; i++) {\n      let newSeqIndex =\n        possibleIndexes[Math.floor(Math.random() * seqLength)];\n      let newSoundIndex = getNextSoundIndex(this.sounds, currentChord);\n      this.currentSequence[newSeqIndex] = newSoundIndex;\n      possibleIndexes.splice(newSeqIndex, 1);\n    }\n  }\n\n  buildFromPattern(patternIndex : number){\n    let newSeq = [...this.patterns[patternIndex]];\n    newSeq.forEach((step : number, index : number)=>{\n      if (!isNaN(step)){\n        newSeq[index] = Math.floor(Math.random() * this.sounds.length)\n      }\n    })\n    this.currentSequence = newSeq;\n  }\n\n  playSeqPosition(position : number){\n      if (!isNaN(this.currentSequence[position])) {\n        //this.sounds[this.currentSoundIndex].howl.stop();\n        if (!this.disabled) {\n          this.sounds[this.currentSequence[position]].howl.play();\n          this.currentSoundIndex = this.currentSequence[position];\n        }\n      }  \n  }\n\n  updateChords(currentChord : string) {\n    if (this.tonal) {\n      this.currentSequence.forEach((seqItem: number, seqIndex: number) => {\n        if (!isNaN(seqItem)) {\n          if (!this.sounds[seqItem].chords.includes(currentChord)) {\n            this.currentSequence[seqIndex] = getNextSoundIndex(\n              this.sounds,\n              currentChord\n            );\n          }\n        }\n      });\n    }\n  }\n\n  updateActivity(currentChord : string){\n    this.calcAmountOfNotes();\n    let currentSequenceNoteIndices : number[] = [];\n    let currentSequenceEmptyIndices : number[] = [];\n    let editIndex : number;\n    let noteDifference : number;\n\n    this.currentSequence.forEach((seqItem : number, index: number) => {\n        if (!isNaN(seqItem)){\n            currentSequenceNoteIndices.push(index)\n        }   else {\n            currentSequenceEmptyIndices.push(index)\n        }\n    })\n\n    noteDifference = this.noteAmt - currentSequenceNoteIndices.length\n    if (noteDifference < 0){\n        for (let i = 0; i > noteDifference; i--){\n            editIndex = Math.floor(Math.random() * currentSequenceNoteIndices.length);\n            this.currentSequence[currentSequenceNoteIndices[editIndex]] = NaN;\n            currentSequenceNoteIndices.splice(editIndex, 1)\n        }\n    } else if (noteDifference > 0){\n        for (let i = 0; i < noteDifference; i++){\n            editIndex = Math.floor(Math.random() * currentSequenceEmptyIndices.length);\n            this.currentSequence[currentSequenceEmptyIndices[editIndex]] = getNextSoundIndex(this.sounds, currentChord);\n            currentSequenceEmptyIndices.splice(editIndex, 1)\n        }\n    }\n  }\n}\n\nclass Sound {\n  howl: any;\n  chords: any;\n\n  constructor(url: string, baseVolume: number, initVolume: number, chords: string[]) {\n    this.howl = new Howl({\n      src: [url],\n      volume: baseVolume * (initVolume / 100)\n    })\n    this.chords = chords;\n  }\n}\n\n/*  for each track, initsoundPlayer loads every sample into a new howl, \n    together with the chords that particular sound can be played on it.\n    All these sounds are then pushed into a sequencer object, which controls the playback\n    \n    soundSources [\n        sequencer :\n            sounds: [{\n                howl: *ACTUAL SOUND*\n                chords [\"Array of chords it can be played on\"]\n            ]}\n    ]  \n*/\n\nexport function initSoundPlayer(state: any) {\n  Howler.volume(2);\n\n  soundSources.forEach((track: any, index: number) => {\n    let soundsArr: any[] = [];\n    switch (track.kind) {\n      case \"inst\":\n        track.sampleLoader.forEach((sample: any) => {\n          soundsArr.push(\n            new Sound(sample.sampleSource, track.baseVolume, track.initVolume, sample.chords)\n          );\n        });\n        track.sequencer = new Sequencer(\n          soundsArr,\n          state[keys.actKey + index],\n          state[keys.disabledKey + index],\n          false,\n          true,\n          track.maxSoundsInSequence,\n          track.minSoundsInSequence,\n          state.currentChord,\n          track.initPattern\n        );\n        break;\n\n      case \"drum\":\n        track.sampleLoader.forEach((sample: any) => {\n          soundsArr.push(\n            new Sound(sample.sampleSource, track.baseVolume, track.initVolume, sample.chords)\n          );\n        });\n        track.sequencer = new Sequencer(\n          soundsArr,\n          100,\n          state[keys.disabledKey + index].disabled,\n          track.patterns,\n          false,\n          track.maxSoundsInSequence,\n          track.minSoundsInSequence,\n          state.currentChord,\n          track.initPattern\n        );\n        break;\n\n        case \"fx\":\n          track.sampleLoader.forEach((sample: any) => {\n            soundsArr.push(\n              new Sound(sample.sampleSource, track.baseVolume, track.initVolume, sample.chords)\n            );\n          });\n          track.sequencer = new Sequencer(\n            soundsArr,\n            100,\n            state[keys.disabledKey + index].disabled,\n            false,\n            false,\n            track.maxSoundsInSequence,\n            track.minSoundsInSequence,\n            state.currentChord,\n            track.initPattern\n          );\n          break;     \n    }    \n  });\n}\n\n\nexport function setTrackVolume(volume: number, index: number) {\n  soundSources[index].sequencer.sounds.forEach((sound: any) => {\n    sound.howl.volume(\n      (volume / 100) * soundSources[index].baseVolume\n    );\n  });\n}\n\nexport function updateTrackActivity(activity: number, index: number, currentChord: string) {\n  soundSources[index].sequencer.activity = activity;\n  soundSources[index].sequencer.updateActivity(currentChord);\n}\n\nexport function setTrackDisable(disabled : boolean, index: number) {\n  soundSources[index].sequencer.disabled = disabled;\n  if (disabled) {\n    stopAllSounds(index);\n  }\n  if (!disabled && soundSources[index].kind === \"fx\"){\n    soundSources[index].sequencer.sounds[0].howl.play()\n  }\n}\n\nexport function stopAllSounds(index: number) {\n  soundSources[index].sequencer.sounds.forEach((sound: any) => {\n    sound.howl.stop();\n  });\n}\n\nfunction getRandomIntButNotThisOne(range: number, current: number) {\n  let out = Math.floor(Math.random() * range);\n  if (out === current) {\n    out = getRandomIntButNotThisOne(range, out);\n  }\n  return out;\n}\n\nfunction getNextSoundIndex(sounds: object[], currentChord: string) {\n  let newSoundIndex: number;\n  let newSoundOptions: number[] = [];\n  sounds.forEach((sound: any, index: number) => {\n    if (sound.chords.includes(currentChord)) {\n      newSoundOptions.push(index);\n    }\n  });\n  newSoundIndex = randomArrEntry(newSoundOptions);\n\n  return newSoundIndex;\n}\n\nexport function updateCurrentSequenceChords(currentChord: string) {\n  soundSources.forEach((track: any, index: any) => {\n    if (track.kind === \"inst\"){\n      track.sequencer.updateChords(currentChord);\n    }\n  });\n}\n\nexport function playSequencers(position: number){\n  soundSources.forEach((track: any, index: any) => {\n    if (track.kind === \"inst\" || track.kind === \"drum\"){\n      track.sequencer.playSeqPosition(position);\n    }\n  });\n}\n\nexport function playFX(){\n  soundSources.forEach((track: any, index: any) => {\n    if (track.kind === \"fx\"){\n      if (!track.sequencer.disabled){\n      track.sequencer.sounds[0].howl.play();\n      }\n    }\n  });\n}\n\nexport function updatePattern(value: number, index: number){\n  soundSources[index].sequencer.buildFromPattern(value - 1);\n}\n\nexport function mutateSequence(currentChord: string, index: number) {\n  soundSources[index].sequencer.currentSequence = randomMutation(\n    1,\n    soundSources[index].sequencer.currentSequence,\n    soundSources[index].sequencer.sounds,\n    soundSources[index].sequencer.tonal,\n    currentChord\n  );\n}\n\n\nfunction randomMutation(\n  iterations: number,\n  startingSeq: number[],\n  sounds: any,\n  tonal: boolean,\n  currentChord: string\n) {\n  let newSeq = [...startingSeq];\n  for (let i = 0; i < iterations; i++) {\n    let emptyIndexes: number[] = [];\n    let filledIndexes: number[] = [];\n    newSeq.forEach((step: number, index: number) => {\n      isNaN(step) ? emptyIndexes.push(index) : filledIndexes.push(index);\n    });\n    if (tonal){\n      newSeq[\n        emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)]\n      ] = getNextSoundIndex(sounds, currentChord)\n    } else {\n      newSeq[\n        emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)]\n      ] = Math.floor(Math.random() * sounds.length);\n    }\n\n    newSeq[\n      filledIndexes[Math.floor(Math.random() * filledIndexes.length)]\n    ] = NaN;\n  }\n  return newSeq;\n}\n\n\n\n\n","/Users/Ruben/Desktop/Coding/projects/ambientmusic/src/soundsources.ts",["36"],"import piano1 from \"./sound/1 piano/1.mp3\"\nimport piano2 from \"./sound/1 piano/2.mp3\"\nimport piano3 from \"./sound/1 piano/3.mp3\"\nimport piano4 from \"./sound/1 piano/4.mp3\"\nimport piano5 from \"./sound/1 piano/5.mp3\"\nimport piano6 from \"./sound/1 piano/6.mp3\"\nimport piano7 from \"./sound/1 piano/7.mp3\"\nimport piano8 from \"./sound/1 piano/8.mp3\"\nimport piano9 from \"./sound/1 piano/9.mp3\"\nimport piano10 from \"./sound/1 piano/10.mp3\"\nimport piano11 from \"./sound/1 piano/11.mp3\"\nimport piano12 from \"./sound/1 piano/12.mp3\"\nimport piano13 from \"./sound/1 piano/13.mp3\"\nimport piano14 from \"./sound/1 piano/14.mp3\"\nimport piano15 from \"./sound/1 piano/15.mp3\"\nimport piano16 from \"./sound/1 piano/16.mp3\"\nimport piano17 from \"./sound/1 piano/17.mp3\"\nimport piano18 from \"./sound/1 piano/18.mp3\"\nimport piano19 from \"./sound/1 piano/19.mp3\"\nimport piano20 from \"./sound/1 piano/20.mp3\"\n\nimport synthbas1 from \"./sound/2 synthbas/1.mp3\"\nimport synthbas2 from \"./sound/2 synthbas/2.mp3\"\nimport synthbas3 from \"./sound/2 synthbas/3.mp3\"\nimport synthbas4 from \"./sound/2 synthbas/4.mp3\"\nimport synthbas5 from \"./sound/2 synthbas/5.mp3\"\nimport synthbas6 from \"./sound/2 synthbas/6.mp3\"\nimport synthbas7 from \"./sound/2 synthbas/7.mp3\"\nimport synthbas8 from \"./sound/2 synthbas/8.mp3\"\nimport synthbas9 from \"./sound/2 synthbas/9.mp3\"\nimport synthbas10 from \"./sound/2 synthbas/10.mp3\"\nimport synthbas11 from \"./sound/2 synthbas/11.mp3\"\nimport synthbas12 from \"./sound/2 synthbas/12.mp3\"\nimport synthbas13 from \"./sound/2 synthbas/13.mp3\"\nimport synthbas14 from \"./sound/2 synthbas/14.mp3\"\n\n\nimport synthpad1 from \"./sound/3 synthpad/1.mp3\"\nimport synthpad2 from \"./sound/3 synthpad/2.mp3\"\nimport synthpad3 from \"./sound/3 synthpad/3.mp3\"\nimport synthpad4 from \"./sound/3 synthpad/4.mp3\"\nimport synthpad5 from \"./sound/3 synthpad/5.mp3\"\nimport synthpad6 from \"./sound/3 synthpad/6.mp3\"\nimport synthpad7 from \"./sound/3 synthpad/7.mp3\"\nimport synthpad8 from \"./sound/3 synthpad/8.mp3\"\nimport synthpad9 from \"./sound/3 synthpad/9.mp3\"\nimport synthpad10 from \"./sound/3 synthpad/10.mp3\"\nimport synthpad11 from \"./sound/3 synthpad/11.mp3\"\nimport synthpad12 from \"./sound/3 synthpad/12.mp3\"\nimport synthpad13 from \"./sound/3 synthpad/13.mp3\"\nimport synthpad14 from \"./sound/3 synthpad/14.mp3\"\n\nimport kalimba1 from \"./sound/4 kalimba/1.mp3\"\nimport kalimba2 from \"./sound/4 kalimba/2.mp3\"\nimport kalimba3 from \"./sound/4 kalimba/3.mp3\"\nimport kalimba4 from \"./sound/4 kalimba/4.mp3\"\nimport kalimba5 from \"./sound/4 kalimba/5.mp3\"\nimport kalimba6 from \"./sound/4 kalimba/6.mp3\"\nimport kalimba7 from \"./sound/4 kalimba/7.mp3\"\nimport kalimba8 from \"./sound/4 kalimba/8.mp3\"\nimport kalimba9 from \"./sound/4 kalimba/9.mp3\"\nimport kalimba10 from \"./sound/4 kalimba/10.mp3\"\nimport kalimba11 from \"./sound/4 kalimba/11.mp3\"\nimport kalimba12 from \"./sound/4 kalimba/12.mp3\"\nimport kalimba13 from \"./sound/4 kalimba/13.mp3\"\nimport kalimba14 from \"./sound/4 kalimba/14.mp3\"\nimport kalimba15 from \"./sound/4 kalimba/15.mp3\"\n\nimport strings1 from \"./sound/5 strings/1.mp3\"\nimport strings2 from \"./sound/5 strings/2.mp3\"\nimport strings3 from \"./sound/5 strings/3.mp3\"\nimport strings4 from \"./sound/5 strings/4.mp3\"\nimport strings5 from \"./sound/5 strings/5.mp3\"\nimport strings6 from \"./sound/5 strings/6.mp3\"\nimport strings7 from \"./sound/5 strings/7.mp3\"\nimport strings8 from \"./sound/5 strings/8.mp3\"\nimport strings9 from \"./sound/5 strings/9.mp3\"\nimport strings10 from \"./sound/5 strings/10.mp3\"\nimport strings11 from \"./sound/5 strings/11.mp3\"\nimport strings12 from \"./sound/5 strings/12.mp3\"\nimport strings13 from \"./sound/5 strings/13.mp3\"\nimport strings14 from \"./sound/5 strings/14.mp3\"\nimport strings15 from \"./sound/5 strings/15.mp3\"\nimport strings16 from \"./sound/5 strings/16.mp3\"\nimport strings17 from \"./sound/5 strings/17.mp3\"\n\nimport pluckbas1 from \"./sound/6 pluckbas/1.mp3\"\nimport pluckbas2 from \"./sound/6 pluckbas/2.mp3\"\nimport pluckbas3 from \"./sound/6 pluckbas/3.mp3\"\nimport pluckbas4 from \"./sound/6 pluckbas/4.mp3\"\nimport pluckbas5 from \"./sound/6 pluckbas/5.mp3\"\nimport pluckbas6 from \"./sound/6 pluckbas/6.mp3\"\nimport pluckbas7 from \"./sound/6 pluckbas/7.mp3\"\nimport pluckbas8 from \"./sound/6 pluckbas/8.mp3\"\nimport pluckbas9 from \"./sound/6 pluckbas/9.mp3\"\nimport pluckbas10 from \"./sound/6 pluckbas/10.mp3\"\nimport pluckbas11 from \"./sound/6 pluckbas/11.mp3\"\nimport pluckbas12 from \"./sound/6 pluckbas/12.mp3\"\nimport pluckbas13 from \"./sound/6 pluckbas/13.mp3\"\nimport pluckbas14 from \"./sound/6 pluckbas/14.mp3\"\n\nimport kick from \"./sound/drums/kick.mp3\"\nimport snare1 from \"./sound/drums/snare1.mp3\"\nimport snare2 from \"./sound/drums/snare2.mp3\"\nimport snare3 from \"./sound/drums/snare3.mp3\"\n\nimport rain from \"./sound/fx/rain.mp3\"\nimport vinyl from \"./sound/fx/vinyl.mp3\"\nimport forest from \"./sound/fx/forest.mp3\"\n\n// shorten NaN for better sequencer pattern readability (see drumtracks below)\nconst N = NaN;\n\n/* soundSources is the source of all non-user-accessible data. \neach array entry represents one 'track' or sound family, with the following properties:\n\n-sampleLoader: object that holds the URL for every individual sample, together with the chords on which that sample can be played\n-kind: inst, drum of fx - used to make different categories behave in different ways\n-sequencer: soundPlayerInit creates an instance of the Sequencer class here, which holds all sounds (as Howls from howler.js)\n  and the current sequence of the track.\n-baseVolume: can be used to make an entire track louder or softer without having to re-export al samples\n-currentVolume: current volume of the track\n-currentSoundIndex: index of the current sound playing in sequencer.sounds\n-maxSoundsInSequence: amount of sounds per sequence when track activity is 100\n-minSoundsInSequence: amount of sounds per sequence when track activity is 1\n-name: track name\n-init** :stats with which the track will start - accessed in InitializeState\n*/\n\nexport const soundSources : any = [\n//INSTURMENTS////\n  {\n    sampleLoader: [\n      { sampleSource: piano1, chords: ['G','E','C'] },\n      { sampleSource: piano2, chords: ['B','D','G','E'] },\n      { sampleSource: piano3, chords: ['D','G','B'] },\n      { sampleSource: piano4, chords: ['A','C','D','G'] },\n      { sampleSource: piano5, chords: ['A','C'] },\n      { sampleSource: piano6, chords: ['A','D','C'] },\n      { sampleSource: piano7, chords: ['C','A'] },\n      { sampleSource: piano8, chords: ['A'] },\n      { sampleSource: piano9, chords: ['A','C'] },\n      { sampleSource: piano10, chords: ['A','C'] },\n      { sampleSource: piano11, chords: ['C','G','E'] },\n      { sampleSource: piano12, chords: ['B'] },\n      { sampleSource: piano13, chords: ['D','B'] },\n      { sampleSource: piano14, chords: ['E'] },\n      { sampleSource: piano15, chords: ['G'] },\n      { sampleSource: piano16, chords: ['A'] },\n      { sampleSource: piano17, chords: ['D'] },\n      { sampleSource: piano18, chords: ['E'] },\n      { sampleSource: piano19, chords: ['G'] },\n      { sampleSource: piano20, chords: ['D','A','B'] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.8,\n    maxSoundsInSequence: 8,\n    minSoundsInSequence: 1,\n    name: \"Piano\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: true,\n    initVolume: 100,\n    mutationChance: 0.2,\n  },\n  {\n    sampleLoader: [  \n      { sampleSource: synthbas1, chords: [\"G\"] },\n      { sampleSource: synthbas2, chords: [\"G\"] },\n      { sampleSource: synthbas3, chords: [\"A\"] },\n      { sampleSource: synthbas4, chords: [\"A\"] },\n      { sampleSource: synthbas5, chords: [\"B\"] },\n      { sampleSource: synthbas6, chords: [\"B\"] },\n      { sampleSource: synthbas7, chords: [\"C\"] },\n      { sampleSource: synthbas8, chords: [\"C\"] },\n      { sampleSource: synthbas9, chords: [\"D\"] },\n      { sampleSource: synthbas10, chords: [\"D\"] },\n      { sampleSource: synthbas11, chords: [\"E\"] },\n      { sampleSource: synthbas12, chords: [\"E\"] },\n      { sampleSource: synthbas13, chords: [\"F\"] },\n      { sampleSource: synthbas14, chords: [\"F\"] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 1,\n    maxSoundsInSequence: 12,\n    minSoundsInSequence: 1,\n    name: \"Bass\",\n    initDisabled: false,\n    initActivity: 40,\n    initDrifting: false,\n    initVolume: 100,\n    mutationChance: 0.2,\n  },\n  {\n    sampleLoader: [\n      { sampleSource: synthpad1, chords: ['G','E','C'] },\n      { sampleSource: synthpad2, chords: ['B','D','G','E','C'] },\n      { sampleSource: synthpad3, chords: ['D','A','B'] },\n      { sampleSource: synthpad4, chords: ['B','C','E','G'] },\n      { sampleSource: synthpad5, chords: ['A','C'] },\n      { sampleSource: synthpad6, chords: ['G'] },\n      { sampleSource: synthpad7, chords: ['G','E'] },\n      { sampleSource: synthpad8, chords: ['G','E','C'] },\n      { sampleSource: synthpad9, chords: ['A','D'] },\n      { sampleSource: synthpad10, chords: ['G','E'] },\n      { sampleSource: synthpad11, chords: ['E'] },\n      { sampleSource: synthpad12, chords: ['C','A'] },\n      { sampleSource: synthpad13, chords: ['G','B'] },\n      { sampleSource: synthpad14, chords: ['E','B','G','D'] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.5,\n    maxSoundsInSequence: 5,\n    minSoundsInSequence: 1,\n    name: \"Pad\",\n    initDisabled: false,\n    initActivity: 40,\n    initDrifting: false,\n    initVolume: 50,\n    mutationChance: 0.2,\n  },\n  {\n    sampleLoader: [\n      { sampleSource: kalimba1, chords: ['G','E','C','A','D'] },\n      { sampleSource: kalimba2, chords: ['B','D'] },\n      { sampleSource: kalimba3, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: kalimba4, chords: ['C','E','G'] },\n      { sampleSource: kalimba5, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: kalimba6, chords: ['A','D','C'] },\n      { sampleSource: kalimba7, chords: ['B','D','G'] },\n      { sampleSource: kalimba8, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: kalimba9, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: kalimba10, chords: ['A','C'] },\n      { sampleSource: kalimba11, chords: ['A','C','E'] },\n      { sampleSource: kalimba12, chords: ['D','G','B','E','C'] },\n      { sampleSource: kalimba13, chords: ['A','C','E'] },\n      { sampleSource: kalimba14, chords: ['G','C','E'] },\n      { sampleSource: kalimba15, chords: ['A','C'] }, \n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.7,\n    maxSoundsInSequence: 12,\n    minSoundsInSequence: 1,\n    name: \"Kalimba\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 100,\n    mutationChance: 0.2,\n  },\n  {\n    sampleLoader: [\n      { sampleSource: strings1, chords: ['G','E'] },\n      { sampleSource: strings2, chords: ['B','G'] },\n      { sampleSource: strings3, chords: ['A','C'] },\n      { sampleSource: strings4, chords: ['C','E'] },\n      { sampleSource: strings5, chords: ['E','G'] },\n      { sampleSource: strings6, chords: ['C'] },\n      { sampleSource: strings7, chords: ['A','E'] },\n      { sampleSource: strings8, chords: ['D','B'] },\n      { sampleSource: strings9, chords: ['G','E','A','C'] },\n      { sampleSource: strings10, chords: ['D','G','B'] },\n      { sampleSource: strings11, chords: ['A','C','E'] },\n      { sampleSource: strings12, chords: ['D','G','B','A'] },\n      { sampleSource: strings13, chords: ['D','G','B','E','A','C'] },\n      { sampleSource: strings14, chords: ['A','C','D'] },\n      { sampleSource: strings15, chords: ['D','G','B'] }, \n      { sampleSource: strings16, chords: ['D','G','B','E','A','C'] }, \n      { sampleSource: strings17, chords: ['D','G','B'] }, \n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.3,\n    maxSoundsInSequence: 3,\n    minSoundsInSequence: 1,\n    name: \"Strings\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 50,\n    mutationChance: 0.2,\n  },\n  {\n    sampleLoader: [\n      { sampleSource: pluckbas1, chords: ['E','A'] },\n      { sampleSource: pluckbas2, chords: ['D','G'] },\n      { sampleSource: pluckbas3, chords: ['G','E','C'] },\n      { sampleSource: pluckbas4, chords: ['A','D'] },\n      { sampleSource: pluckbas5, chords: ['B','E','G'] },\n      { sampleSource: pluckbas6, chords: ['C','A'] },\n      { sampleSource: pluckbas7, chords: ['D','G','B','E','C'] },\n      { sampleSource: pluckbas8, chords: ['E'] },\n      { sampleSource: pluckbas9, chords: ['D'] },\n      { sampleSource: pluckbas10, chords: ['G'] },\n      { sampleSource: pluckbas11, chords: ['A'] },\n      { sampleSource: pluckbas12, chords: ['B','E','G'] },\n      { sampleSource: pluckbas13, chords: ['C','A'] },\n      { sampleSource: pluckbas14, chords: ['D','G','B','E','C','A'] },\n    ],\n    kind: \"inst\",\n    sequencer : {},\n    baseVolume: 0.7,\n    maxSoundsInSequence: 8,\n    minSoundsInSequence: 1,\n    name: \"Pluck Bass\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 50,\n    mutationChance: 0.3,\n  },\n  //DRUMS///\n  {\n    sampleLoader:[\n      {sampleSource: kick}\n    ],\n    kind: \"drum\",\n    patterns: [\n    //|1           2           3           4          |1           2           3           4         |\n      [0, N, N, N, N, N, N, N, N, N, N, N, N, N, 0, N, 0, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N],\n      [0, N, N, N, N, N, N, N, 0, N, N, N, N, N, 0, N, 0, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N],\n      [0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, N, N, 0, N, 0, N],\n      [0, N, N, 0, 0, N, 0, N, 0, N, N, N, 0, N, 0, N, 0, N, N, N, 0, N, N, N, 0, N, N, 0, N, N, 0, N],\n      ],\n    baseVolume: 1,\n    currentsequence : [],\n    sequencer : {},\n    maxSoundsInSequence: 12,\n    minSoundsInSequence: 1,\n    name: \"Kick\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 100,\n    initPattern: 2,\n    mutationChance: 0.2,\n  },\n  {\n    sampleLoader:[\n      {sampleSource: snare1},\n      {sampleSource: snare2},\n      //{sampleSource: snare3},\n    ],\n    kind: \"drum\",\n    patterns: [\n    //|1           2           3           4          |1           2           3           4         |\n      [N, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N],\n      [N, N, N, N, 0, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N, 0, N, N, N, N, N, N, N, 0, N, N, N],\n      [N, N, N, 0, N, N, N, N, N, N, N, N, 0, N, N, N, N, 0, N, N, 0, N, N, N, N, N, 0, N, 0, N, N, N],\n      ],\n    baseVolume: 0.5,\n    currentsequence : [],\n    sequencer : {},\n    maxSoundsInSequence: 12,\n    minSoundsInSequence: 1,\n    name: \"Snare\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 100,\n    initPattern: 1,\n    mutationChance: 0.3,\n    },\n//FX//////\n  {\n    sampleLoader: [{ sampleSource: vinyl }],\n    baseVolume: 0.3,\n    kind: \"fx\",\n    name: \"Vinyl\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: true,\n    initVolume: 100,\n  },\n  {\n    sampleLoader: [{ sampleSource: rain }],\n    baseVolume: 0.07,\n    kind: \"fx\",\n    name: \"Rain\",\n    initDisabled: false,\n    initActivity: 20,\n    initDrifting: true,\n    initVolume: 40,\n  },\n  {\n    sampleLoader: [{ sampleSource: forest }],\n    baseVolume: 0.2,\n    kind: \"fx\",\n    name: \"Forest\",\n    initDisabled: true,\n    initActivity: 20,\n    initDrifting: false,\n    initVolume: 0,\n  },\n];",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":318,"column":55,"nodeType":"43","messageId":"44","endLine":318,"endColumn":57},{"ruleId":"41","severity":1,"message":"42","line":403,"column":55,"nodeType":"43","messageId":"44","endLine":403,"endColumn":57},{"ruleId":"41","severity":1,"message":"42","line":454,"column":55,"nodeType":"43","messageId":"44","endLine":454,"endColumn":57},{"ruleId":"45","severity":1,"message":"46","line":4,"column":10,"nodeType":"47","messageId":"48","endLine":4,"endColumn":29},{"ruleId":"45","severity":1,"message":"49","line":268,"column":11,"nodeType":"47","messageId":"48","endLine":268,"endColumn":36},{"ruleId":"45","severity":1,"message":"50","line":105,"column":8,"nodeType":"47","messageId":"48","endLine":105,"endColumn":14},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","@typescript-eslint/no-unused-vars","'SSL_OP_NO_QUERY_MTU' is defined but never used.","Identifier","unusedVar","'getRandomIntButNotThisOne' is defined but never used.","'snare3' is defined but never used.","no-global-assign","no-unsafe-negation"]